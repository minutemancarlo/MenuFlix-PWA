@page "/users"
@layout MainLayout
@using System.Net.Http.Json
@using SharedLibrary
@using Client.Identity
@using System.Security.Claims
@inject IAccountManagement Acct
@inject AuthenticationStateProvider AuthProvider
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>User Management</PageTitle>
<MudStack>
<MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
    <MudCard Elevation="4" Class="pa-3 pt-5">
        <MudCardContent>
            <MudDataGrid Items="@users" MultiSelection="false" Virtualize @bind-SelectedItems="_selectedItems" @bind-SelectedItem="_currentDto" Elevation="0" Loading="_loading" QuickFilter="@_quickFilter" Hover ColumnResizeMode="ResizeMode.Column" Filterable HeaderClass=" text-uppercase font-weight-bold">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Assignable Users List</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Name" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                    <PropertyColumn Property="x => x.Email" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                    <PropertyColumn Property="x => x.PhoneNumber" Title="Phone Number" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                    <PropertyColumn Property="x => x.Role" Title="Current Role" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                    <TemplateColumn Title="Change Role" HeaderClass="blue darken-1 shades-text text-white" Filterable="false">                        
                        <CellTemplate>  
                            <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" Tag="@context.Item" ValueChanged="@HandleRoleChange"
                                            Dense Color="Color.Primary" CheckMark FixedContent>
                                <MudToggleItem Value="@("Administrator")" Text="Administrator" />
                                <MudToggleItem Value="@("Accounting")" Text="Accounting" />
                            </MudToggleGroup>

                        </CellTemplate>
                     </TemplateColumn>
                </Columns>
                <NoRecordsContent>No available records to show.</NoRecordsContent>
                <PagerContent>
                    <MudDataGridPager T="UserDataGrid" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
</MudStack>




        

@code {
    private MudDataGrid<UserDataGrid> _users = default!;
    private List<UserDataGrid> users = new List<UserDataGrid>();
    private bool _loading = false;
    private string _searchString;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private bool IsCurrentUser = false;
    private UserDataGrid _currentDto = new UserDataGrid();
    private HashSet<UserDataGrid> _selectedItems = new();
    private string emailaddress;
    private MudToggleGroup<string> toggleGroupRef;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();

            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    IsCurrentUser = true;
                    emailaddress = item.Value;
                }
            }
        }
        else
        {
            // Handle the case where the user is not authenticated
        }
        await loadGrid();
    }

    private async Task loadGrid()
    {
        _loading = true;
        var allUsers = await httpClient.GetFromJsonAsync<List<UserDataGrid>>("UserManagement/getallusers");
        users = allUsers.Where(u => u.Email != emailaddress).ToList();
        _loading = false;
    }

    private async Task HandleRoleChange(string newValue)
    {
        if (_currentDto.UserId == null)
        {
            return;
        }
        else
        {
            await ChangeRole(newValue);
        }

    }



    private async Task ChangeRole(string role)
    {        
        var res = await DialogService.ShowConfirmationDialogAsync("Confirmation", $"Change User Role from {_currentDto.Role} to {role}?", "Yes", "No");
        if (res)
        {            
            _currentDto.Role = role;
            if (await UpdateUserRole(_currentDto))
            {
                Snackbar.Add("User Role Changed", Severity.Success);
                await loadGrid();
            }
            else
            {
                Snackbar.Add("Failed to change ", Severity.Error);
            }

            
        }        
    }

    public async Task<bool> UpdateUserRole(UserDataGrid userDataGrid)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("RoleManager/updateuserrole", userDataGrid);

            if (response.IsSuccessStatusCode)
            {
                // Role updated successfully
                return true;
            }
            else
            {
                // Failed to update role
                return false;
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
            return false;
        }
    }
    

    
    private Func<UserDataGrid, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.PhoneNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            

        return false;
    };

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Administrator", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("User Management", href: "#", icon: Icons.Material.Filled.Groups)
    };
}                    