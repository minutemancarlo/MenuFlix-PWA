@page "/admin-dashboard"
@inject AuthenticationStateProvider AuthProvider
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Store Management</PageTitle>

<MudItem xs="12">
    <MudItem>
        <MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
    </MudItem>
    <MudItem>
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Class="d-flex">
            <MudCard Outlined="true" Class="flex-grow-1 text-black" Style="background: #ecf0f1;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Active Stores</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Storefront" Color="Color.Inherit" Size="Size.Large" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-center" Typo="Typo.h3">@ActiveStores</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" FullWidth="true" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Inherit">View</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard Outlined="true" Class="flex-grow-1 text-black" Style="background: #ecf0f1;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Inactive Stores</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Storefront" Color="Color.Inherit" Size="Size.Large" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-center" Typo="Typo.h3">@InactiveStores</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" FullWidth="true" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Inherit">View</MudButton>
                </MudCardActions>
            </MudCard>
            <MudCard Outlined="true" Class="flex-grow-1 text-black" Style="background: #ecf0f1;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Total Income</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Storefront" Color="Color.Inherit" Size="Size.Large" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Class="text-center" Typo="Typo.h3">0</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" FullWidth="true" StartIcon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Inherit">View</MudButton>
                </MudCardActions>
            </MudCard>
           
        </MudStack>
    </MudItem>
    <MudItem>
        <MudStack Row>
            <MudStack Row="false">
                <MudText Typo="Typo.h6">Store Monthly Income</MudText>
                <MudChart ChartType="ChartType.Line" Class="mx-3 px-3" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
            </MudStack>
            <MudStack Row="false">
                <MudText Typo="Typo.h6">Store Annual Income</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
            </MudStack>
        </MudStack>        
    </MudItem>
</MudItem>


@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Administrator", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("Dashboard", href: "#", icon: Icons.Material.Filled.Dashboard)
    };
    private int ActiveStores;
    private int InactiveStores;
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep","Oct","Nov","Dec" };

    protected override async void OnInitialized()
    {
        await OnGetStores();
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "₱0";        
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await base.OnAfterRenderAsync(firstRender);

    }

    private async Task OnGetStores()
    {
        var Active = await httpClient.GetFromJsonAsync<List<int>>($"ApplicationsManager/getstorecount?status={1}");
        foreach(var item in Active)
        {            
            ActiveStores = item;            
        }

        var Inactive = await httpClient.GetFromJsonAsync<List<int>>($"ApplicationsManager/getstorecount?status={0}");

        foreach (var item in Inactive)
        {
            InactiveStores = item;
        }
        StateHasChanged();
    }
}
