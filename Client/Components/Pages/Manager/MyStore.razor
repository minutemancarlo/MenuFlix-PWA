@page "/manager-mystore"
@using SharedLibrary
@using Client.Validations
@using FluentValidation
@using System.Security.Claims
@layout MainLayout
@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider
@attribute [Authorize(Roles = "Manager")]
<PageTitle>My Store</PageTitle>
<MudGrid Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudStack Class="my-3">
        <MudCard Elevation="4">
            <MudLoading Overlap Darken @bind-Loading="@dataloading">
                <MudCardContent>
                    <MudForm Model="@store" @ref="@form" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0">
                        <MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                            <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                <MudImage Src="@imageUrl" Height="192" Width="192" />
                                
                                    <MudFileUpload T="IBrowserFile" Accept=".png" MaximumFileCount="1" FilesChanged="UploadFiles">
                                        <ButtonTemplate>
                                            <MudFab HtmlTag="label"
                                                    Size="MudBlazor.Size.Small"
                                                    Color="MudBlazor.Color.Secondary"
                                                    StartIcon="@Icons.Material.Filled.Image"
                                                    Label="Select Image"
                                                    for="@context.Id" />
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                

                            </MudPaper>
                            <MudSpacer />
                            <MudStack>
                                <MudTextField Label="Store Name"
                                              Margin="Margin.Dense"
                                              Variant="Variant.Outlined"
                                              @bind-Value="store.Name"                                              
                                              OnlyValidateIfDirty="true"
                                              For="@(() => store.Name)" />
                                <MudTextField Label="T.I.N No."
                                              Margin="Margin.Dense"
                                              ReadOnly="@_read"
                                              OnlyValidateIfDirty="true"
                                              Variant="Variant.Outlined"
                                              @bind-Value="store.TIN"
                                              For="@(() => store.TIN)" />
                                <MudTextField Label="Email Address"
                                              Margin="Margin.Dense"                                              
                                              OnlyValidateIfDirty="true"
                                              Variant="Variant.Outlined"
                                              @bind-Value="store.Email"
                                              For="@(() => store.Email)" />
                                <MudTextField Label="Phone Number"
                                              Margin="Margin.Dense"                                              
                                              OnlyValidateIfDirty="true"
                                              MaxLength="11"
                                              Variant="Variant.Outlined"
                                              @bind-Value="store.PhoneNumber"
                                              For="@(() => store.PhoneNumber)" />
                            </MudStack>
                        </MudStack>
                        <MudTextField @bind-Value="store.AddressLine1"
                                      For="@(() => store.AddressLine1)"                                      
                                      OnlyValidateIfDirty="true"
                                      Margin="Margin.Dense"
                                      Class="pt-4 pb-1 px-1"
                                      Variant="Variant.Outlined"
                                      Label="Address Line 1" />
                        <MudTextField @bind-Value="store.AddressLine2"
                                      For="@(() => store.AddressLine2)"
                                      Margin="Margin.Dense"
                                      Class="pa-1"                                      
                                      Variant="Variant.Outlined"
                                      Label="Address Line 2" />
                        <MudStack Row>
                            <MudTextField @bind-Value="store.CityTown"
                                          For="@(() => store.CityTown)"
                                          Margin="Margin.Dense"
                                          Class="pa-1"
                                          OnlyValidateIfDirty="true"                                          
                                          Variant="Variant.Outlined"
                                          Label="City/Town" />
                            <MudTextField @bind-Value="store.Province"
                                          For="@(() => store.Province)"
                                          Margin="Margin.Dense"                                          
                                          OnlyValidateIfDirty="true"
                                          Class="pa-1"
                                          Variant="Variant.Outlined"
                                          Label="Province" />
                            <MudTextField @bind-Value="store.PostalCode"
                                          For="@(() => store.PostalCode)"
                                          Margin="Margin.Dense"                                          
                                          OnlyValidateIfDirty="true"
                                          Class="pa-1"
                                          MaxLength="4"
                                          Variant="Variant.Outlined"
                                          Label="Postal Code" />
                        </MudStack>
                    </MudForm>
                    <MudCardActions>
                        <MudLoadingButton Variant="Variant.Filled"
                                          Color="MudBlazor.Color.Success"
                                          Size="MudBlazor.Size.Small"
                                          Loading="@(_loading)"                                          
                                          OnClick="Submit"
                                          ButtonType="ButtonType.Button">
                            <LoadingContent>Submitting...</LoadingContent>
                            <ChildContent>Submit</ChildContent>
                        </MudLoadingButton>
                        <MudSpacer />
                        <MudAlert Severity="@((store.Status == "1") ? MudBlazor.Severity.Success : MudBlazor.Severity.Warning)" Variant="Variant.Filled" Dense="true" Class="my-2">@((store.Status == "1") ? "Approved" : "For Approval")</MudAlert>
                    </MudCardActions>
                </MudCardContent>
            </MudLoading>
        </MudCard>
    </MudStack>
</MudGrid>

@code {
    private string first = String.Empty;
    StoreApplications store = new StoreApplications();
    StoreValidator modelValidator = new StoreValidator();
    MudForm? form;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    string emailaddress = String.Empty;
    private bool _loading = false;
    private string imageUrl = "add-image.png";
    private bool _read = false;
    private bool dataloading = false;
    private UpdateStoreInfo updateStoreInfo = new UpdateStoreInfo();

    protected override async Task OnInitializedAsync()
    {
        dataloading = true;
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();
            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
        }

        await OnGetStoreInfo();
        await base.OnInitializedAsync();
    }

    private async Task OnGetStoreInfo()
    {
        var response = await httpClient.GetAsync($"ApplicationsManager/getstore?emailaddress={emailaddress}");

        if (response.IsSuccessStatusCode)
        {
            StoreApplications info = await response.Content.ReadFromJsonAsync<StoreApplications>();
            // Update form fields with retrieved details
            store.TIN = info.TIN;
            store.Name = info.Name;
            store.Logo = info.Logo;
            store.Status = info.Status;
            store.PhoneNumber = info.PhoneNumber;
            store.Email = info.Email;
            store.AddressLine1 = info.AddressLine1;
            store.AddressLine2 = info.AddressLine2;
            store.CityTown = info.CityTown;
            store.Province = info.Province;
            store.PostalCode = info.PostalCode;
            store.OwnerId = info.OwnerId;
            store.Id = info.Id;
            _read = true;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorMessage);
            _read = false;
        }
        dataloading = false;
        updateStoreInfo.isLogoChanged = false;
    }


    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                store.Logo= base64String;
                updateStoreInfo.isLogoChanged = true;
                // Construct the data URL
                imageUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }




    private async Task Submit()
    {
        try
        {
            _loading = true;
            await form.Validate();

            if (form.IsValid)
            {

                updateStoreInfo.Id = int.Parse(store.Id);
                updateStoreInfo.Logo = store.Logo;
                updateStoreInfo.Name = store.Name;
                updateStoreInfo.Email = store.Email;
                updateStoreInfo.Phone = store.PhoneNumber;
                updateStoreInfo.AddressLine1 = store.AddressLine1;
                updateStoreInfo.AddressLine2 = store.AddressLine2;
                updateStoreInfo.CityTown = store.CityTown;
                updateStoreInfo.Province = store.Province;
                updateStoreInfo.PostalCode = store.PostalCode;


                var options = new DialogOptions
                    {
                        MaxWidth = MaxWidth.Medium
                    };
                bool? result = await DialogService.ShowMessageBox("Confirmation", "Do you want to continue?", "Continue", null, "Cancel", options);


                if (result == true)
                {
                    if (await AddStore(updateStoreInfo))
                    {
                        Snackbar.Add("Updated!", MudBlazor.Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Failed to submit.", MudBlazor.Severity.Error);
                    }
                    await OnGetStoreInfo();
                }
            }
            _loading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            Console.WriteLine(ex.Message);
            _loading = false;
        }


    }

    public async Task<bool> AddStore(UpdateStoreInfo storeApplications)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("ApplicationsManager/updatestore", storeApplications);

            if (response.IsSuccessStatusCode)
            {
                // Role updated successfully
                return true;
            }
            else
            {
                // Failed to update role
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                return false;
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
            return false;
        }
    }
}