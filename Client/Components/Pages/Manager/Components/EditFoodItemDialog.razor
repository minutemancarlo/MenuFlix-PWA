@using SharedLibrary
@using Client.Validations
@using System.Security.Claims
@using System.Net.Http.Json
@using System.Net
@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Edit Food Item
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudItem xs="12">
            <MudText Typo="Typo.body1" Class="py-3"><strong>Food Item Name: </strong>@model.Name</MudText>
            <MudForm @ref="@foodItemForm" Model="@model" Validation="@(foodItemValidator.ValidateValue)" ValidationDelay="0">
                <MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                    <MudPaper Style="width: 192; height: 192;" Class="text-center">
                        <MudImage Src="@imageUrl" Height="192" Width="192" />
                        <MudFileUpload T="IBrowserFile" Accept=".png" Class="py-1" MaximumFileCount="1" FilesChanged="UploadFiles">
                            <ButtonTemplate>
                                <MudFab HtmlTag="label"
                                        Size="MudBlazor.Size.Small"
                                        Color="MudBlazor.Color.Secondary"
                                        StartIcon="@Icons.Material.Filled.Image"
                                        Label="Select Image"
                                        for="@context.Id" />
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudPaper>
                    <MudSpacer />
                    <MudStack>
                        <MudTextField Label="Item Name"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Immediate="false"
                                      OnlyValidateIfDirty="true"
                                      For="@(() => model.Name)"
                                      @bind-Value="model.Name" />
                        <MudAutocomplete T="string"
                                         Label="Category Name"
                                         Immediate="false"
                                         OnlyValidateIfDirty="true"
                                         @bind-Value="SearchCategory"
                                         SearchFunc="@Search1"
                                         Margin="Margin.Dense"
                                         For="@(() => model.CategoryName)"
                                         Dense
                                         Variant="Variant.Outlined">
                            <ProgressIndicatorInPopoverTemplate>
                                <MudList Clickable="false">
                                    <MudListItem>
                                        Loading...
                                    </MudListItem>
                                </MudList>
                            </ProgressIndicatorInPopoverTemplate>
                            <MoreItemsTemplate>
                                <MudText Align="Align.Center" Class="px-4 py-1">
                                    Only the first 10 Categories are shown
                                </MudText>
                            </MoreItemsTemplate>
                            <NoItemsTemplate>
                                <MudText Align="Align.Center" Class="px-4 py-1">
                                    No items found
                                </MudText>
                            </NoItemsTemplate>
                        </MudAutocomplete>
                        <MudTextField Label="Description"
                                      Margin="Margin.Dense"
                                      Immediate="false"
                                      Variant="Variant.Outlined"
                                      For="@(() => model.Description)"
                                      OnlyValidateIfDirty="true"
                                      @bind-Value="model.Description" />
                        <MudNumericField @bind-Value="model.Price" AdornmentText="Php"
                                         Adornment="Adornment.Start" Margin="Margin.Dense"
                                         Immediate="false"
                                         For="@(() => model.Price)"
                                         HideSpinButtons
                                         OnlyValidateIfDirty="true"
                                         Label="Price" Format="F1" Variant="Variant.Outlined" />                        
                    </MudStack>
                </MudStack>
            </MudForm>
        </MudItem>
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudLoadingButton Variant="Variant.Filled"
                          Color="Color.Success"
                          Size="Size.Medium"
                          Loading="false"
                          OnClick="OnSubmit"
                          ButtonType="ButtonType.Button">
            <LoadingContent>Updating...</LoadingContent>
            <ChildContent>Update</ChildContent>
        </MudLoadingButton>        
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public FoodItem model { get; set; }
    FoodItemValidator foodItemValidator = new FoodItemValidator();
    MudForm? foodItemForm;
    private List<Category> categoryParent = new List<Category>();    
    private string imageUrl = "add-image.png";
    private string initialImage = "";
    [Parameter] public string emailaddress { get; set; }
    private string[]? searchBoxCategory;    
    [Parameter] public string? searchCategory { get; set; }
    private bool _itemLoading = false;
    public string? SearchCategory
    {
        get { return searchCategory; }
        private set
        {
            searchCategory = value;
            model.CategoryName = categoryParent.Where(category => category.Name == searchCategory).Select(category => category.CategoryId).FirstOrDefault().ToString();
        }
    }

    
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await OnGetCategories();
        imageUrl = model.Logo;
        initialImage = imageUrl;
        await base.OnInitializedAsync();
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                model.Logo = base64String;
                // Construct the data URL
                imageUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return searchBoxCategory;
        return searchBoxCategory.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnGetCategories()
    {
        categoryParent = await httpClient.GetFromJsonAsync<List<Category>>($"FoodCategory/getcategories?email={emailaddress}");

        searchBoxCategory = categoryParent.Select(category => category.Name).ToArray();
    }

    private async Task OnSubmit()
    {
        _itemLoading = true;

        try
        {
            // foodItem.Logo = imageUrl;
            if (initialImage == imageUrl)
            {
                model.Logo = "0";
            }

            model.UpdatedBy = emailaddress;
            await foodItemForm.Validate();
            var data = new FoodItem
                {
                    ItemId = model.ItemId,
                    Name = model.Name,
                    Description = model.Description,
                    CategoryName = model.CategoryName,
                    Logo = model.Logo,
                    Price = model.Price,
                    UpdatedBy = model.UpdatedBy,
                    CreatedBy= "0",
                    Email="0"
                };

            if (foodItemForm.IsValid)
            {
                var response = await httpClient.PostAsJsonAsync("FoodItem/updatefooditem", data);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Food Item Updated", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));

                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    Snackbar.Add("Food Item already exists", Severity.Warning);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred: {errorMessage}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            _itemLoading = false;
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
        }

        _itemLoading = false;
    }
}