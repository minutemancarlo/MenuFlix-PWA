@page "/manager-menu"
@attribute [Authorize(Roles = "Manager")]
@using System.Net.Http.Json
@using Client.Validations
@using SharedLibrary
@using System.Security.Claims
@using System.Net

@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider
<PageTitle>Menu Management</PageTitle>
<MudItem xs="12">
    <MudItem>
        <MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
    </MudItem>
    <MudItem>
        @*Main*@
        <MudStack Row>
            <MudItem>
                @*Item Info*@
                <MudCard Elevation="4">
                    <MudCardContent>
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.LunchDining" class="mr-3"></MudIcon>
                                    <MudText>Add Food Item</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudForm @ref="@foodItemForm" Model="@foodItem" Validation="@(foodItemValidator.ValidateValue)" ValidationDelay="0">
                                    <MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                        <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                            <MudImage Src="@imageUrl" Height="192" Width="192" />
                                            <MudFileUpload T="IBrowserFile" Accept=".png" Class="py-1" MaximumFileCount="1" FilesChanged="UploadFiles">
                                                <ButtonTemplate>
                                                    <MudFab HtmlTag="label"
                                                            Size="MudBlazor.Size.Small"
                                                            Color="MudBlazor.Color.Secondary"
                                                            StartIcon="@Icons.Material.Filled.Image"
                                                            Label="Select Image"
                                                            for="@context.Id" />
                                                </ButtonTemplate>
                                            </MudFileUpload>
                                        </MudPaper>
                                        <MudSpacer />
                                        <MudStack>
                                            <MudTextField Label="Item Name"
                                                          Margin="Margin.Dense"
                                                          Variant="Variant.Outlined"
                                                          Immediate="false"
                                                          For="@(() => foodItem.Name)"
                                                          @bind-Value="foodItem.Name" />
                                            <MudAutocomplete T="string"
                                                             Label="Category Name"
                                                             Immediate="false"
                                                             @bind-Value="SearchCategory"
                                                             SearchFunc="@Search1"
                                                             Margin="Margin.Dense"
                                                             For="@(() => foodItem.CategoryName)"
                                                             Dense
                                                             Variant="Variant.Outlined">
                                                <ProgressIndicatorInPopoverTemplate>
                                                    <MudList Clickable="false">
                                                        <MudListItem>
                                                            Loading...
                                                        </MudListItem>
                                                    </MudList>
                                                </ProgressIndicatorInPopoverTemplate>
                                                <MoreItemsTemplate>
                                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                                        Only the first 10 Categories are shown
                                                    </MudText>
                                                </MoreItemsTemplate>
                                                <NoItemsTemplate>
                                                    <MudText Align="Align.Center" Class="px-4 py-1">
                                                        No items found
                                                    </MudText>
                                                </NoItemsTemplate>
                                            </MudAutocomplete>
                                            <MudTextField Label="Description"
                                                          Margin="Margin.Dense"
                                                          Immediate="false"
                                                          Variant="Variant.Outlined"
                                                          For="@(() => foodItem.Description)"
                                                          @bind-Value="foodItem.Description" />
                                            <MudNumericField @bind-Value="foodItem.Price" AdornmentText="Php"
                                                             Adornment="Adornment.Start" Margin="Margin.Dense"
                                                             Immediate="false"
                                                             For="@(() => foodItem.Price)"
                                                             HideSpinButtons
                                                             Label="Price" Format="F1" Variant="Variant.Outlined" />
                                        </MudStack>
                                    </MudStack>
                                </MudForm>
                                <MudItem Class="float-end">
                                    <MudLoadingButton Variant="Variant.Filled"
                                                      Color="Color.Success"
                                                      Size="Size.Medium"
                                                      Loading="false"
                                                      OnClick="OnSaveItem"
                                                      ButtonType="ButtonType.Button">
                                        <LoadingContent>Submitting...</LoadingContent>
                                        <ChildContent>Submit</ChildContent>
                                    </MudLoadingButton>
                                </MudItem>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem>
                @*Category Name*@
                <MudCard Elevation="4" Class="pt-1">
                    <MudCardContent>
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.RoomService" class="mr-3"></MudIcon>
                                    <MudText>Add Category</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Row>
                                    <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                    </MudPaper>
                                    <MudStack>
                                        <MudForm @ref="@categoryForm" Model="@category" Validation="@(categoryValidator.ValidateValue)" ValidationDelay="0">


                                            <MudTextField Label="Category"
                                                          Margin="Margin.Dense"
                                                          Variant="Variant.Outlined"
                                                          For="@(() => category.Name)"
                                                          @bind-Value="category.Name" />
                                            <MudTextField Label="Description"
                                                          Margin="Margin.Dense"
                                                          HelperText="Optional"
                                                          Variant="Variant.Outlined"
                                                          For="@(() => category.Description)"
                                                          @bind-Value="category.Description" />
                                        </MudForm>
                                    </MudStack>
                                </MudStack>
                                <MudItem Class="float-end">
                                    <MudLoadingButton Variant="Variant.Filled"
                                                      Color="Color.Success"
                                                      Size="Size.Medium"
                                                      OnClick="OnSaveCategory"
                                                      Loading="false"
                                                      ButtonType="ButtonType.Button">
                                        <LoadingContent>Submitting...</LoadingContent>
                                        <ChildContent>Submit</ChildContent>
                                    </MudLoadingButton>
                                </MudItem>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem>
                @*Discounts*@
                <MudCard Elevation="4" Class="pt-1">
                    <MudCardContent>
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.LocalOffer" class="mr-3"></MudIcon>
                                    <MudText>Add Discounts</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudForm @ref="@foodItemDiscountForm" Model="@discounts" Validation="@(foodItemDiscountValidator.ValidateValue)" ValidationDelay="0">
                                <MudStack Row>
                                    <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                    </MudPaper>
                                    <MudStack>
                                        <MudAutocomplete T="string"
                                                         Label="Food Item Name"
                                                         Immediate="false"
                                                         @bind-Value="SearchFoodItem"
                                                         For="@(() => discounts.FoodItemId)"
                                                         SearchFunc="@Search2"
                                                         Margin="Margin.Dense"                                                         
                                                         Dense
                                                         Variant="Variant.Outlined">
                                            <ProgressIndicatorInPopoverTemplate>
                                                <MudList Clickable="false">
                                                    <MudListItem>
                                                        Loading...
                                                    </MudListItem>
                                                </MudList>
                                            </ProgressIndicatorInPopoverTemplate>
                                            <MoreItemsTemplate>
                                                <MudText Align="Align.Center" Class="px-4 py-1">
                                                    Only the first 10 Items are shown
                                                </MudText>
                                            </MoreItemsTemplate>
                                            <NoItemsTemplate>
                                                <MudText Align="Align.Center" Class="px-4 py-1">
                                                    No items found
                                                </MudText>
                                            </NoItemsTemplate>
                                        </MudAutocomplete>
                                        <MudTextField Label="Discount Name"
                                                      Margin="Margin.Dense"
                                                      Immediate="false"
                                                      Variant="Variant.Outlined"
                                                      For="@(() => discounts.DiscountName)"
                                                      @bind-Value="discounts.DiscountName" />
                                        <MudNumericField @bind-Value="discounts.DiscountAmount" AdornmentText="Php"
                                                         Adornment="Adornment.Start" Margin="Margin.Dense"
                                                         Immediate="false"
                                                         For="@(() => discounts.DiscountAmount)"
                                                         HideSpinButtons
                                                         Label="Discount" Format="F1" Variant="Variant.Outlined" />                                       
                                    </MudStack>
                                </MudStack>
                                <MudItem Class="float-end">
                                    <MudLoadingButton Variant="Variant.Filled"
                                                      Color="Color.Success"
                                                      Size="Size.Medium"
                                                          Loading="@_foodItemDiscountLoading"
                                                      OnClick="OnSaveDiscounts"
                                                      ButtonType="ButtonType.Button">
                                        <LoadingContent>Submitting...</LoadingContent>
                                        <ChildContent>Submit</ChildContent>
                                    </MudLoadingButton>
                                </MudItem>
                                </MudForm>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudStack>
        <MudItem Class="py-2">
            <MudPaper Elevation="4" Class="pa-2">
                <MudDataGrid Items="@foodItemsGrid" Loading="_foodItemGridLoading"
                             Hover
                             ColumnResizeMode="ResizeMode.Container"
                             QuickFilter="@_quickFilter"
                             HeaderClass="align-center"
                             Dense>
                    <ToolBarContent>
                        <MudButton Variant="Variant.Filled" Class="my-2 mx-1" OnClick="OnGetFoodItems" Size="Size.Small" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Success">Reload</MudButton>                        
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn Sortable="false" Title="Food Item Image" CellClass="text-center" HeaderClass="blue fw-bold darken-1 shades-text text-light justify-items-center">
                            <CellTemplate>
                                <MudTooltip Color="Color.Primary" Placement="Placement.Bottom" Arrow="true" Duration="1000" Text="Duration: 1000">
                                    <ChildContent>
                                        <MudImage Src="icon-192.png" Width="50" Height="50" />
                                    </ChildContent>
                                    <TooltipContent>                                        
                                        <MudText Typo="Typo.body2"><strong>@context.Item.Description</strong></MudText>
                                    </TooltipContent>
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Actions" Sortable="false" CellClass="text-center" HeaderClass="align-center blue fw-bold darken-1 shades-text text-light">
                            <CellTemplate>            
                                <MudIconButton Icon="@Icons.Material.Filled.ModeEdit" Size="Size.Small" aria-label="edit" Color="Color.Primary"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OnButtonStatusClicked(context.Item.ItemId.ToString()))" Size="Size.Small" aria-label="delete" Color="Color.Error"></MudIconButton>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Name" Title="Item Name" HeaderClass="blue fw-bold darken-1 shades-text text-light" />
                        <PropertyColumn Property="x => x.Price" Title="Item Price" HeaderClass="text-center blue fw-bold darken-1 shades-text text-light" />
                        <PropertyColumn Property="x => x.Category" Title="Category" HeaderClass="text-center blue fw-bold darken-1 shades-text text-light" />
                        <PropertyColumn Property="x => x.DiscountAmount" Title="Discount Amount" HeaderClass="text-center blue fw-bold darken-1 shades-text text-light" />
                        <PropertyColumn Property="x => x.DiscountedPrice" Title="Discount Price" HeaderClass="text-center blue fw-bold darken-1 shades-text text-light" />
                        <TemplateColumn Title="Active Status" Sortable="false" CellClass="text-center" HeaderClass="align-center blue fw-bold darken-1 shades-text text-light">
                            <CellTemplate>
                                @if (context.Item.IsDisabled == 0)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small">Active</MudChip>
                                }
                                else
                                {
                                    <MudChip Color="Color.Error" Size="Size.Small">Inactive</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.CreatedBy" Title="Created By" HeaderClass="blue fw-bold darken-1 shades-text justify-content-center text-light" />
                        <PropertyColumn Property="x => x.CreatedOn" Title="Created On" HeaderClass="blue fw-bold darken-1 shades-text justify-content-center text-light" />
                        <PropertyColumn Property="x => x.UpdatedBy" Title="Updated By" HeaderClass="blue fw-bold darken-1 shades-text justify-content-center text-light" />
                        <PropertyColumn Property="x => x.UpdatedOn" Title="Updated On" HeaderClass="blue fw-bold darken-1 shades-text justify-content-center text-light" />
                    </Columns>
                    <NoRecordsContent>No available records to show.</NoRecordsContent>
                    <PagerContent>
                        <MudDataGridPager T="FoodItemDataGrid" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudItem>
</MudItem>


<MudMessageBox @ref="mbox" Title="Confirmation" >
    <MessageContent>
        Change Status of the Item?
    </MessageContent>
    <NoButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close" Class="my-2 mx-1">Inactive</MudButton>
    </NoButton>
    
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" Class="my-2 mx-1">Active</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Store Manager", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("Menu Management", href: "#", icon: Icons.Material.Filled.RestaurantMenu)
    };
    private string imageUrl = "add-image.png";
    private string? sample;
    private string? emailaddress;
    private string? _searchString;
    private bool _categoryLoading = false;
    private bool _itemLoading = false;
    private bool _foodItemGridLoading = false;
    private bool _foodItemDiscountLoading = false;
    private List<FoodItem> itemsList = new List<FoodItem>(); //overall item info
    private List<FoodItemDataGrid> foodItemsGrid = new List<FoodItemDataGrid>();
    private List<Category> categoryParent = new List<Category>();
    private List<FoodItemDataGrid> foodItemParent = new List<FoodItemDataGrid>();
    private FoodItem foodItem = new FoodItem(); // Single Food Item for saving
    private FoodItemDiscount discounts = new FoodItemDiscount();
    FoodItemValidator foodItemValidator = new FoodItemValidator();
    FoodItemDiscountValidator foodItemDiscountValidator = new FoodItemDiscountValidator();


    private Category category = new Category();
    CategoryValidator categoryValidator = new CategoryValidator();
    MudForm? categoryForm;
    MudForm? foodItemForm;
    MudForm? foodItemDiscountForm;
    MudMessageBox mbox { get; set; }
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private string[]? searchBoxCategory;
    private string[]? searchBoxFoodItem;
    private string? searchCategory;
    public string? SearchCategory
    {
        get { return searchCategory; }
        private set
        {
            searchCategory = value;
            foodItem.CategoryName = categoryParent.Where(category => category.Name == searchCategory).Select(category => category.CategoryId).FirstOrDefault().ToString();
        }
    }
    private string? searchFoodItem { get; set; }
    public string? SearchFoodItem
    {
        get { return searchFoodItem; }
        private set
        {
            searchFoodItem = value;
            discounts.FoodItemId = foodItemParent.Where(category => category.Name == searchFoodItem).Select(category => category.ItemId).FirstOrDefault().ToString();
        }
    }
    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                // store.Logo = base64String;
                // Construct the data URL
                imageUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();
            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
        }
        await OnGetCategories();
        await OnGetFoodItems();
        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return searchBoxCategory;
        return searchBoxCategory.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return searchBoxFoodItem;
        return searchBoxFoodItem.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnGetCategories()
    {
        categoryParent = await httpClient.GetFromJsonAsync<List<Category>>($"FoodCategory/getcategories?email={emailaddress}");

        searchBoxCategory = categoryParent.Select(category => category.Name).ToArray();
    }

    private async Task OnSaveCategory()
    {
        _categoryLoading = true;

        try
        {
            await categoryForm.Validate();

            if (categoryForm.IsValid)
            {
                var data = new CategoryWithEmail
                    {
                        Email = emailaddress,
                        Category = category
                    };
                var response = await httpClient.PostAsJsonAsync("FoodCategory/addfoodcategory", data);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Category Name Added", Severity.Success);
                    category = new();
                    await OnGetCategories();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred:{errorMessage}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
            _categoryLoading = false;
        }

        _categoryLoading = false;

    }

    private async Task OnSaveItem()
    {
        _itemLoading = true;

        try
        {            
            foodItem.Logo = "add-image.png";
            foodItem.Email = emailaddress;
            foodItem.ItemId = 0;
            foodItem.Discount = 0;
            foodItem.CreatedBy = emailaddress;
            foodItem.UpdatedBy = emailaddress;
            await foodItemForm.Validate();

            if (foodItemForm.IsValid)
            {
                var response = await httpClient.PostAsJsonAsync("FoodItem/addfooditem", foodItem);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Food Item Added", Severity.Success);
                    foodItem = new();
                    searchCategory = "";
                    await OnGetFoodItems();
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    Snackbar.Add("Food Item already exists", Severity.Warning);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred: {errorMessage}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            _itemLoading = false;
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
        }

        _itemLoading = false;
    }

    private async Task OnSaveDiscounts()
    {
        _foodItemDiscountLoading = true;        
        discounts.CreatedBy = emailaddress;
        discounts.isActive = 0;
        discounts.UpdatedBy = "0";
        await foodItemDiscountForm.Validate();
        try
        {
            if (foodItemDiscountForm.IsValid)
            {
                var response = await httpClient.PostAsJsonAsync("FoodItemDiscount/addfooddiscount", discounts);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Food Item Discount Added", Severity.Success);
                    discounts = new();
                    searchFoodItem = "";
                    await OnGetFoodItems();
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    Snackbar.Add("Food Item Discount Name already exists", Severity.Warning);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred: {errorMessage}", Severity.Error);
                }
            }
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
            _foodItemDiscountLoading = false;
        }
        finally
        {
            _foodItemDiscountLoading = false;
        }

    }

    private async Task OnGetFoodItems()
    {
        _foodItemGridLoading = true;
        foodItemsGrid = await httpClient.GetFromJsonAsync<List<FoodItemDataGrid>>($"FoodItem/getfooditems?email={emailaddress}");
        foodItemParent = foodItemsGrid;
        searchBoxFoodItem = foodItemParent.Select(category => category.Name).ToArray();
        _foodItemGridLoading = false;
    }

    private async void OnButtonStatusClicked(string itemId)
    {
        bool? result = await mbox.Show();
        if(result==true)
        {            
            try
            {
                var fooditemstatus = new FoodItemStatus
                    {
                        ItemId = itemId,
                        IsDisabled = 0,
                        Email = emailaddress
                    };
                    var response = await httpClient.PostAsJsonAsync("FoodItem/changeitemstatus", fooditemstatus);

                    if (response.IsSuccessStatusCode)
                    {
                        Snackbar.Add("Item status has been changed to Active", Severity.Success);                        
                        await OnGetFoodItems();
                    }
                    else if (response.StatusCode == HttpStatusCode.Conflict)
                    {
                        await OnGetFoodItems();
                        Snackbar.Add("Unable to change food item status", Severity.Warning);
                    }
                    else
                    {
                        var errorMessage = await response.Content.ReadAsStringAsync();
                        Console.WriteLine(errorMessage);
                        Snackbar.Add($"An exception occurred: {errorMessage}", Severity.Error);
                    }
                
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
          
            }
          


            
        }else if (result == false)
        {
            try
            {
                var fooditemstatus = new FoodItemStatus
                    {
                        ItemId = itemId,
                        IsDisabled = 0,
                        Email = emailaddress
                    };
                var response = await httpClient.PostAsJsonAsync("FoodItem/changeitemstatus", fooditemstatus);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Item status has been changed to Inactive", Severity.Success);
                    await OnGetFoodItems();
                }
                else if (response.StatusCode == HttpStatusCode.Conflict)
                {
                    await OnGetFoodItems();
                    Snackbar.Add("Unable to change food item status", Severity.Warning);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred: {errorMessage}", Severity.Error);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);

            }
            
        }        
        StateHasChanged();
    }

    private Func<FoodItemDataGrid, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
               return true;

           return false;
       };
}
