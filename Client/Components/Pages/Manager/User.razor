@page "/applicants"
@layout MainLayout
@using System.Net.Http.Json
@using SharedLibrary
@using Client.Identity
@using System.Security.Claims
@using Client.Components.Pages.Manager.Components
@inject IAccountManagement Acct
@inject AuthenticationStateProvider AuthProvider
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Manager")]

<PageTitle>Applications Management</PageTitle>
<MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
<MudGrid class="d-flex justify-center align-center">
    <MudStack>
        <MudCard Elevation="4" Class="pa-3 pt-5">
            <MudCardContent>
                <MudDataGrid Items="@users" MultiSelection="false" Virtualize @bind-SelectedItems="_selectedItems"
                             @bind-SelectedItem="_currentDto" Elevation="0" Loading="_loading" QuickFilter="@_quickFilter"
                             Hover ColumnResizeMode="ResizeMode.Column"
                             Filterable HeaderClass=" text-uppercase font-weight-bold">
                    <ToolBarContent>                        
                        <MudLoadingButton Variant="Variant.Filled"
                                          StartIcon="@Icons.Material.Filled.Save"
                                          Color="Color.Success"
                                          Size="Size.Medium"
                                          OnClick="@(async () => await OnChangeStatus())"
                                          Loading="@(_submit)"
                                          ButtonType="ButtonType.Button"
                                          >
                            <LoadingContent>Saving...</LoadingContent>
                            <ChildContent>Save Changes</ChildContent>
                        </MudLoadingButton>
                        <MudSpacer />

                        
                        @* <MudText Typo="Typo.h6">Applicants List</MudText> *@


                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.FullName" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                        <PropertyColumn Property="x => x.Email" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                        <PropertyColumn Property="x => x.PhoneNumber" Title="Phone Number" HeaderClass="blue darken-1 shades-text text-white" Filterable="false" />
                        <TemplateColumn Title="Address" HeaderClass="blue darken-1 shades-text text-white" Filterable="false">
                            <CellTemplate>
                                <MudText Class="py-1 fw-bold" Typo="Typo.body2">@($"{context.Item.AddressLine1}{(context.Item.AddressLine2 != "N/A" ? string.Concat(" ,", context.Item.AddressLine2) : "")}")</MudText>
                                <MudText Class="py-1" Typo="Typo.body2"> @($"{context.Item.CityTown}, {context.Item.Province} {context.Item.PostalCode}")</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Position Applied" CellClass="text-center" HeaderClass="blue text-center darken-1 shades-text text-white" Filterable="false" Sortable="false">
                            <CellTemplate>
                                <MudStack Row AlignItems="AlignItems.Baseline">
                                <MudText Class="py-1 fw-bold text-center" Typo="Typo.body2">@(context.Item.Position == 1 ? "Store Cashier" : "Delivery Rider")</MudText>
                                @if (context.Item.Position != 1)
                                {
                                    <MudTooltip Text="View Driver's License" Color="Color.Info" Arrow="true">
                                            <MudIconButton Icon="@Icons.Material.Filled.Info" OnClick="@(() => OpenDialog(context.Item.License))" />
                                    </MudTooltip>
                                }
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Action" HeaderClass="blue darken-1 shades-text text-white" Filterable="false">
                            <CellTemplate>
                                <MudSwitch @bind-Value="@context.Item.Status" Label="@(context.Item.Status == 0 ? "New" : "Approved")" Color="Color.Success" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <NoRecordsContent>No available records to show.</NoRecordsContent>
                    <PagerContent>
                        <MudDataGridPager T="EmployeeApplications" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudStack>

</MudGrid>






@code {
    private MudDataGrid<EmployeeApplications> _users = default!;
    private List<EmployeeApplications> users = new List<EmployeeApplications>();
    private bool _loading = false;
    private string _searchString;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private bool IsCurrentUser = false;
    private EmployeeApplications _currentDto = new EmployeeApplications();
    private HashSet<EmployeeApplications> _selectedItems = new();
    private string emailaddress;
    private MudToggleGroup<string> toggleGroupRef;
    private bool _submit = false;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();

            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    IsCurrentUser = true;
                    emailaddress = item.Value;
                }
            }
        }
        else
        {
            // Handle the case where the user is not authenticated
        }
        await loadGrid();
    }

    private async Task loadGrid()
    {
        _loading = true;
        users = await httpClient.GetFromJsonAsync<List<EmployeeApplications>>($"ApplicationsManager/getapplicantsall?emailaddress={emailaddress}");
        _loading = false;
    }

    private void OpenDialog(string path)
    {
        var parameters = new DialogParameters<ViewLicense>();
        parameters.Add(x => x.ImagePath, path);
        var options = new DialogOptions { CloseOnEscapeKey = true,MaxWidth=MaxWidth.Medium};
        DialogService.Show<ViewLicense>("Driver's License", parameters,options);
    }

    private async Task OnChangeStatus()
    {
        try
        {
            _submit = true;
            List<EmployeeStatusType> updates = new List<EmployeeStatusType>();
            foreach (var item in users)
            {
                var data = new EmployeeStatusType
                    {
                        ApplicationId = item.ApplicationId,
                        UserId = item.UserId,
                        Position = item.Position,
                        Status = item.Status
                    };
                updates.Add(data);
            }

            var response = await httpClient.PostAsJsonAsync("ApplicationsManager/updateemployeestatus", updates);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Changes Saved.", Severity.Success);
                await loadGrid();
                _submit = false;
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                Snackbar.Add($"An exception occurred:{errorMessage}", Severity.Error);
                _submit = false;
            }
        }
        catch (Exception ex)
        {
            _submit = false;
            Snackbar.Add($"Exception Occured: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error: {ex.Message}");
            
        }
    }




    // private async Task ChangeRole(string role)
    // {
    //     var res = await DialogService.ShowConfirmationDialogAsync("Confirmation", $"Change User Role from {_currentDto.Role} to {role}?", "Yes", "No");
    //     if (res)
    //     {
    //         _currentDto.Role = role;
    //         if (await UpdateUserRole(_currentDto))
    //         {
    //             Snackbar.Add("User Role Changed", Severity.Success);
    //             await loadGrid();
    //         }
    //         else
    //         {
    //             Snackbar.Add("Failed to change ", Severity.Error);
    //         }


    //     }
    // }

    // public async Task<bool> UpdateUserRole(UserDataGrid userDataGrid)
    // {
    //     try
    //     {
    //         var response = await httpClient.PostAsJsonAsync("RoleManager/updateuserrole", userDataGrid);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             // Role updated successfully
    //             return true;
    //         }
    //         else
    //         {
    //             // Failed to update role
    //             return false;
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         // Handle exception
    //         Console.WriteLine($"Error: {ex.Message}");
    //         return false;
    //     }
    // }



    private Func<EmployeeApplications, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.PhoneNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Store Manager", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("Applicants Management", href: "#", icon: Icons.Material.Filled.Groups)
    };
}                    