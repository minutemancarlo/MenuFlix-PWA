@page "/"
@using Client.Identity
@using SharedLibrary
@using System.Security.Claims
@layout CustomerLayout
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager _navigationManager
@inject IAccountManagement Acct
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (_open)
{
    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
        <MudItem xs="6">
            <MudPopup @ref="_popup" Open="@_open" Style="background-color: #c0392b " Class="z-100" Text="Register your business now" Icon="@Icons.Material.Filled.Info" PopupPosition="MudExtensions.Enums.PopupPosition.Bottom" EnableAnimation>
                <ChildContent>
                    <MudStack Class="mud-width-full">
                        <div class="d-flex align-center">
                            <MudItem xs="12">
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Style="color: white;" />
                                    <MudText Typo="Typo.h6" Style="color: white;">Revolutionize your business and join us!</MudText>
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ConfirmDetailsInfo">Sign Up My Business</MudButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Style="color: white;" OnClick="ClosePopUp" />
                                </MudStack>
                            </MudItem>
                        </div>
                    </MudStack>
                </ChildContent>
            </MudPopup>
        </MudItem>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudItem xs="6">
            <MudPopup @ref="_popup" Open="@_open" Style="background-color: #c0392b " Class="z-100" Text="Register your business now" Icon="@Icons.Material.Filled.Info" PopupPosition="MudExtensions.Enums.PopupPosition.Bottom" EnableAnimation>
                <ChildContent>
                    <MudStack Class="mud-width-full">
                        <div class="d-flex align-center">
                            <MudItem xs="12">
                                <MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Style="color: white;" />
                                    <MudText Typo="Typo.body2" Style="color: white;">Revolutionize your business and join us!</MudText>
                                    <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning" OnClick="ConfirmDetailsInfo">Join</MudButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Close" Style="color: white;" OnClick="ClosePopUp" />
                                </MudStack>
                            </MudItem>
                        </div>
                    </MudStack>
                </ChildContent>
            </MudPopup>
        </MudItem>
    </MudHidden>

}





<MudCarousel Class="mud-width-full custom-carousel" SelectedIndex="0" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="isLoadingCarousel" TData="object">
    @foreach (var group in groups)
    {
        <MudCarouselItem Transition="transition" Color="@Color.Warning">
            <section>
                <div class="container py-5 text-dark">
                    <div class="row">
                        @foreach (var item in group)
                        {
                            <div class="col-md-6 col-lg-4 mb-4 mb-md-0 d-flex">
                                <div class="card flex-grow-1">
                                    <div class="d-flex justify-content-between p-3">
                                        <p class="lead mb-0 text-dark">@item.Store</p>
                                        @* <div class="bg-info rounded-circle d-flex align-items-center justify-content-center shadow-1-strong" style="width: 35px; height: 35px;">

                                <p class="text-white mb-0 small">x3</p>
                                </div> *@
                                    </div>
                                    <img src="@item.Image" style="width: 200px; height: 200px" class="card-img-top mx-auto d-block" alt="Gaming Laptop" />
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between">
                                            <p class=""><a href="#!" class="text-muted">@item.Category</a></p>
                                            <p class="text-danger"><s>@((item.DiscountedAmount == 0.00M) ? "" : $"₱{item.Price}")</s></p>
                                        </div>
                                        <div class="d-flex justify-content-between mb-3">
                                            <MudLink Href="#" Class="mb-0 flex-grow-1 fs-6 text" Typo="Typo.h5">@item.Name</MudLink>
                                            @* <h5 class="mb-0 flex-grow-1 fs-6 text">@item.Name</h5> *@
                                            <h5 class="text-dark mb-0">₱@(item.DiscountedAmount == 0.00M ? item.Price : item.DiscountedPrice)</h5>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <p class="text-muted mb-0">
                                                @if (isLoggedin)
                                                {
                                                    <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OnAddToCart(item.ItemId))" Color="Color.Error" StartIcon="@Icons.Material.Filled.AddShoppingCart">Add to Cart</MudButton>
                                                }
                                            </p>
                                            <div class="ms-auto text-warning">
                                                <MudRating SelectedValue="@item.Rating" ReadOnly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </section>
        </MudCarouselItem>
    }
</MudCarousel>

@* <MudItem xs="12" Class="d-flex justify-content-center">
        <MudItem xs="8">
            <MudTextField Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" Placeholder="Search here..." Adornment="Adornment.Start" Margin="Margin.Dense" @bind-Value="searchQuery" />
        </MudItem>
    </MudItem> *@

<MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
    <div class="container col-xxl-8 px-4 py-5">
        <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
            <div class="col-10 col-sm-8 col-lg-6">
                <img src="2.webp" class="d-block mx-lg-auto img-fluid" alt="Bootstrap Themes" width="700" height="500" loading="lazy">
            </div>
            <div class="col-lg-6">
                <h1 class="display-5 fw-bold lh-1 mb-3">Unlock Flavorful Adventures: Explore Our Delectable Food Line Now Available at Your Favorite Stores!</h1>
                <p class="lead"></p>
                <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" Href="/menu">Discover Stores</MudButton>
                </div>
            </div>
        </div>
    </div>

    <div class="container col-xxl-8 px-4 py-5">
        <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
            <div class="col-lg-6">
                <h1 class="display-5 fw-bold lh-1 mb-3">Savor Delight, Anywhere, Anytime: Taste Our Culinary Creations with Convenient Food Delivery!</h1>
                <p class="lead"></p>
                <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Href="/menu" Color="Color.Info">Order Now</MudButton>
                </div>
            </div>
            <div class="col-10 col-sm-8 col-lg-6">
                <img src="1.webp" class="d-block mx-lg-auto img-fluid" alt="Bootstrap Themes" width="700" height="500" loading="lazy">
            </div>
        </div>
    </div>
</MudHidden>

<MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
    <MudStack>
        <MudImage Src="2.webp" Fluid ObjectFit="ObjectFit.Cover" />
        <MudText Typo="Typo.h6" Class="display-5 fw-bold lh-1 mb-3">Unlock Flavorful Adventures: Explore Our Delectable Food Line Now Available at Your Favorite Stores!</MudText>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Info" Class="pb-2" Href="/menu">Discover Stores</MudButton>
        <MudImage Src="1.webp" Fluid ObjectFit="ObjectFit.Cover" Width="700" Height="500" />
        <MudText Typo="Typo.h6" Class="display-5 fw-bold lh-1 mb-3">Savor Delight, Anywhere, Anytime: Taste Our Culinary Creations with Convenient Food Delivery!</MudText>
        <MudButton Size="Size.Small" Variant="Variant.Filled" Href="/menu" Color="Color.Info">Order Now</MudButton>

    </MudStack>



</MudHidden>


<!-- Footer -->
<footer class="text-center text-lg-start bg-body-tertiary text-muted w-100" id="#info">

    <!-- Section: Links  -->
    <section class="">
        <div class="container text-center text-md-start mt-5">
            <!-- Grid row -->
            <div class="row mt-3">
                <!-- Grid column -->
                <div class="col-md-3 col-lg-4 col-xl-3 mx-auto mb-4">
                    <!-- Content -->
                    <h6 class="text-uppercase fw-bold mb-4">
                        <i class="fas fa-gem me-3"></i>Company name
                    </h6>
                    <p>
                        <strong>MenuFlix</strong>  A food ordering and
                        delivery system that seamlessly combines elements of menus with the familiarity of 'flix' from streaming
                        services, implying a broad selection of options accessible at users' fingertips. The name suggests a dynamic
                        and engaging platform for exploring food choices and ordering convenience.
                    </p>
                </div>
                <!-- Grid column -->
                <!-- Grid column -->
                <div class="col-md-2 col-lg-2 col-xl-2 mx-auto mb-4">
                    <!-- Links -->
                    <h6 class="text-uppercase fw-bold mb-4">
                        Products
                    </h6>
                    <p>
                        <a href="#!" class="text-reset">Burgers</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Bundles</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Platters</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Drinks</a>
                    </p>
                </div>
                <!-- Grid column -->
                <!-- Grid column -->
                <div class="col-md-3 col-lg-2 col-xl-2 mx-auto mb-4">
                    <!-- Links -->
                    <h6 class="text-uppercase fw-bold mb-4">
                        Useful links
                    </h6>
                    <p>
                        <a href="#!" class="text-reset">Pricing</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Settings</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Orders</a>
                    </p>
                    <p>
                        <a href="#!" class="text-reset">Help</a>
                    </p>
                </div>
                <!-- Grid column -->
                <!-- Grid column -->
                <div class="col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4">
                    <!-- Links -->
                    <h6 class="text-uppercase fw-bold mb-4">Contact</h6>
                    <p><i class="fas fa-home me-3"></i> Rosario, La Union 2506</p>
                    <p>
                        <i class="fas fa-envelope me-3"></i>
                        support@menuflix.com
                    </p>
                    <p><i class="fas fa-phone me-3"></i> + 639 514 56 7188</p>
                    <p><i class="fas fa-print me-3"></i> + 639 514 56 7189</p>
                </div>
                <!-- Grid column -->
            </div>
            <!-- Grid row -->
        </div>
    </section>
    <!-- Section: Links  -->
    <!-- Copyright -->
    <div class="text-center p-4" style="background-color: rgba(0, 0, 0, 0.05);">
        © 2024 Copyright:
        <a class="text-reset fw-bold" href="/">MenuFlix.com</a>
    </div>
    <!-- Copyright -->
</footer>
<!-- Footer -->
@code
{
    [CascadingParameter] public CustomerLayout customerLayout { get; private set; }
    private string? searchQuery;
    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    private List<CarouselDisplay> carouselDisplay = new List<CarouselDisplay>();
    List<List<CarouselDisplay>> groups = new List<List<CarouselDisplay>>();
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    MudPopup _popup;
    bool _open = true;
    private bool IsCustomer { get; set; }
    private bool isLoggedin { get; set; }
    private string emailaddress { get; set; }
    private bool isLoadingCarousel { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        isLoadingCarousel = false;
        await OnGetFoodItemsRandom();
       
        isLoadingCarousel = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;


            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                isLoggedin = user.Identity.IsAuthenticated;
                var isOpenNullable = await localStorage.GetItemAsync<bool?>("_open");

                if (isOpenNullable.HasValue)
                {
                    _open = isOpenNullable.Value;
                }


                UserClaims = user.Claims.ToList();
                foreach (var item in UserClaims)
                {
                    if (item.Type.Contains("emailaddress"))
                    {
                        emailaddress = item.Value;
                    }
                }
                await OnGetCartNumbers();
                await OnGetOrderNumbers();
            }
            else
            {
                _open = false;
            }

            if (user.IsInRole("Manager"))
            {
                RedirectToHome("manager-dashboard");
            }

            if (user.IsInRole("Administrator"))
            {
                RedirectToHome("admin-dashboard");
            }

            if (user.IsInRole("Delivery"))
            {
                RedirectToHome("delivery-dashboard");
            }

            if (user.IsInRole("Accounting"))
            {
                RedirectToHome("accounting-dashboard");
            }


        }
        await base.OnAfterRenderAsync(firstRender);

    }

    private async Task ClosePopUp()
    {
        _open = false;
        await localStorage.SetItemAsync("_open", _open);
    }


    private async Task ConfirmDetailsInfo()
    {
        _navigationManager.NavigateTo("/register-business");
        await Task.CompletedTask;
    }


    private void RedirectToHome(string path)
    {
        _navigationManager.NavigateTo($"/{path}");
    }


    private async Task OnGetFoodItemsRandom()
    {
        try
        {
            isLoadingCarousel = true;
            carouselDisplay = await httpClient.GetFromJsonAsync<List<CarouselDisplay>>($"FoodItem/getfooditemsrandom");
            groups = carouselDisplay
         .Select((item, index) => new { Item = item, Index = index })
         .GroupBy(x => x.Index / 3)
         .Select(g => g.Select(x => x.Item).ToList())
         .ToList();
        }
        catch (Exception ex)
        {

        }


    }

    private async Task OnAddToCart(string itemId)
    {

        try
        {
            var data = new Cart
                {
                    IsProcessed = 0,
                    UserId = emailaddress,
                    Actions = 0,
                    Pcs = 1,
                    ItemId = int.Parse(itemId),
                    CartId = 0
                };
            var response = await httpClient.PostAsJsonAsync("Cart/cartactions", data);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Item Added to Cart", Severity.Success);
                await OnGetCartNumbers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                Snackbar.Add($"An exception occurred:{errorMessage}", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
        }
    }

    private async Task OnGetCartNumbers()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<int>>($"Cart/getcartcount?emailaddress={emailaddress}");
            if (response.Count() <= 0)
            {
                customerLayout.Count = 0;
            }
            else
            {
                customerLayout.Count = response[0];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnGetOrderNumbers()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<int>>($"OrderManagement/GetOrderCount?emailaddress={emailaddress}");
            if (response.Count() <= 0)
            {
                customerLayout.OrderCount = 0;
            }
            else
            {
                customerLayout.OrderCount = response[0];
            }

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred: {ex.Message}", Severity.Error);
        }
    }


}