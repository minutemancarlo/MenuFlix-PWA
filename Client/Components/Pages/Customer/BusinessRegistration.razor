@page "/register-business"
@using SharedLibrary
@using Client.Validations
@using FluentValidation
@using System.Security.Claims
@layout CustomerLayout
@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider
@attribute [Authorize(Roles = "Customer")]
<MudGrid Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudStack Class="my-3">
        <MudCard Elevation="4">
            <MudLoading Overlap Darken @bind-Loading="@dataloading">
            <MudCardContent>
                <MudForm Model="@store" @ref="@form" Validation="@(modelValidator.ValidateValue)" ValidationDelay="0">
                    <MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                        <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                <MudText>Store Logo:</MudText>
                            <MudImage Src="@imageUrl" Height="192" Width="192" />
                            @if (!_read)
                            {
                                <MudFileUpload T="IBrowserFile" Accept=".png" MaximumFileCount="1" FilesChanged="UploadFiles">
                                    <ButtonTemplate>
                                        <MudFab HtmlTag="label"
                                                Size="MudBlazor.Size.Small"
                                                Color="MudBlazor.Color.Secondary"
                                                StartIcon="@Icons.Material.Filled.Image"
                                                Label="Select Image"
                                                for="@context.Id" />
                                    </ButtonTemplate>
                                </MudFileUpload>
                            }
                        </MudPaper>
                            <MudPaper Style="width: 192; height: 192;" Class="text-center">
                                <MudText>Store Gcash:</MudText>                            
                                <MudImage Src="@imageQrUrl" Height="192" Width="192" ObjectFit="ObjectFit.ScaleDown" />
                                @if(!_read){
                                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" MaximumFileCount="1" FilesChanged="UploadFilesQR">
                                        <ButtonTemplate>
                                            <MudFab HtmlTag="label"
                                                    Size="MudBlazor.Size.Small"
                                                    Color="MudBlazor.Color.Secondary"
                                                    StartIcon="@Icons.Material.Filled.Image"
                                                    Label="Select Image"
                                                    for="@context.Id" />
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                }                                
                            </MudPaper>
                        
                        <MudStack>
                            <MudTextField Label="Store Name"
                                          Margin="Margin.Dense"
                                          Variant="Variant.Outlined"
                                          @bind-Value="store.Name"
                                          ReadOnly="@_read"
                                              OnlyValidateIfDirty="true"
                                          For="@(() => store.Name)" />
                            <MudTextField Label="T.I.N No."
                                          Margin="Margin.Dense"
                                          ReadOnly="@_read"
                                              OnlyValidateIfDirty="true"
                                          Variant="Variant.Outlined"
                                          @bind-Value="store.TIN"
                                          For="@(() => store.TIN)" />
                            <MudTextField Label="Email Address"
                                          Margin="Margin.Dense"
                                          ReadOnly="@_read"
                                              OnlyValidateIfDirty="true"
                                          Variant="Variant.Outlined"
                                          @bind-Value="store.Email"
                                          For="@(() => store.Email)" />
                            <MudTextField Label="Phone Number"
                                          Margin="Margin.Dense"
                                          ReadOnly="@_read"
                                              OnlyValidateIfDirty="true"
                                          MaxLength="11"
                                          Variant="Variant.Outlined"
                                          @bind-Value="store.PhoneNumber"
                                          For="@(() => store.PhoneNumber)" />
                        </MudStack>
                    </MudStack>

                        <MudSelect T="string" Label="Region" @ref="_region" ReadOnly="@_read" ShrinkLabel Required RequiredError="Region is Required" OnlyValidateIfDirty="true" Variant="Variant.Outlined" Class="py-2" ValueChanged="@((string newValue) => OnChange(AddressMode.Province, newValue))" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in address.Region)
                            {
                                <MudSelectItem Value="@(item.Code)">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudStack Row Class="py-2" AlignItems="AlignItems.Stretch">
                            <MudSelect T="string" @ref="_province" Label="Province" ReadOnly="@_read" ShrinkLabel FullWidth="true" Required RequiredError="Province is Required" OnlyValidateIfDirty="true" Variant="Variant.Outlined" ValueChanged="@((string newValue) => OnChange(AddressMode.Municipality, newValue))" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in address.Province)
                                {
                                    <MudSelectItem Value="@(item.Code)">@item.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="string" @ref="_municipality" ShrinkLabel ReadOnly="@_read" Label="Municipality" Required RequiredError="Municipality is Required" OnlyValidateIfDirty="true" FullWidth="true" Variant="Variant.Outlined" ValueChanged="@((string newValue) => OnChange(AddressMode.Barangay, newValue))" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in address.Municipality)
                                {
                                    <MudSelectItem Value="@(item.Code)">@item.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="string" @ref="_barangay" ShrinkLabel ReadOnly="@_read" Label="Barangay" FullWidth="true" Required RequiredError="Barangay is Required" OnlyValidateIfDirty="true" Variant="Variant.Outlined" ValueChanged="@((string newValue) => OnChange(AddressMode.None, newValue))" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var item in address.Barangay)
                                {
                                    <MudSelectItem Value="@(item.Code)">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudStack>

                        @* <MudTextField @bind-Value="store.AddressLine1"
                                  For="@(() => store.AddressLine1)"
                                  ReadOnly="@_read"
                                      OnlyValidateIfDirty="true"
                                  Margin="Margin.Dense"
                                  Class="pt-4 pb-1 px-1"
                                  Variant="Variant.Outlined"
                                  Label="Address Line 1" /> *@
                    <MudTextField @bind-Value="store.AddressLine2"
                                  For="@(() => store.AddressLine2)"
                                  Margin="Margin.Dense"
                                  Class="pa-1"
                                  ReadOnly="@_read"
                                  Variant="Variant.Outlined"
                                  Label="Address Line 2" />
                    @* <MudStack Row>
                        <MudTextField @bind-Value="store.CityTown"
                                      For="@(() => store.CityTown)"
                                      Margin="Margin.Dense"
                                      Class="pa-1"
                                          OnlyValidateIfDirty="true"
                                      ReadOnly="@_read"
                                      Variant="Variant.Outlined"
                                      Label="City/Town" />
                        <MudTextField @bind-Value="store.Province"
                                      For="@(() => store.Province)"
                                      Margin="Margin.Dense"
                                      ReadOnly="@_read"
                                          OnlyValidateIfDirty="true"
                                      Class="pa-1"
                                      Variant="Variant.Outlined"
                                      Label="Province" />
                        <MudTextField @bind-Value="store.PostalCode"
                                      For="@(() => store.PostalCode)"
                                      Margin="Margin.Dense"
                                      ReadOnly="@_read"
                                          OnlyValidateIfDirty="true"
                                      Class="pa-1"
                                      MaxLength="4"
                                      Variant="Variant.Outlined"
                                      Label="Postal Code" />
                    </MudStack> *@


                        <MudTextField @bind-Value="store.Description"
                                      For="@(() => store.Description)"
                                      Margin="Margin.Dense"
                                      OnlyValidateIfDirty="true"
                                      Class="pa-1"
                                      Lines="3"
                                      FullWidth="true"
                                      Variant="Variant.Outlined"
                                      Label="Store Description" />
                </MudForm>
                <MudCardActions>
                    <MudLoadingButton Variant="Variant.Filled"
                                      Color="MudBlazor.Color.Success"
                                      Size="MudBlazor.Size.Small"
                                      Loading="@(_loading)"
                                      Disabled="@_read"
                                      OnClick="Submit"                                     
                                      ButtonType="ButtonType.Button">
                        <LoadingContent>Submitting...</LoadingContent>
                        <ChildContent>Submit</ChildContent>
                    </MudLoadingButton>
                    <MudSpacer />
                    <MudAlert Severity="@((store.Status == "1") ? MudBlazor.Severity.Success : MudBlazor.Severity.Warning)" Variant="Variant.Filled" Dense="true" Class="my-2">@((store.Status == "1") ? "Approved" : "For Approval")</MudAlert>
                </MudCardActions>
            </MudCardContent>
            </MudLoading>
        </MudCard>
    </MudStack>
</MudGrid>

@code {
    private string first = String.Empty;
    StoreApplications store = new StoreApplications();
    StoreValidator modelValidator = new StoreValidator();
    MudForm? form;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    string emailaddress = String.Empty;
    private bool _loading = false;
    private string imageUrl = "add-image.png";
    private string imageQrUrl = "add-image.png";
    private bool _read = false;
    private bool dataloading = false;
    private Address address { get; set; } = new();
    private string regionCode { get; set; }
    private string provinceCode { get; set; }
    private string municipalityCode { get; set; }
    private string barangayCode { get; set; }
    MudSelect<string>? _region;
    MudSelect<string>? _province;
    MudSelect<string>? _municipality;
    MudSelect<string>? _barangay;

    private enum AddressMode
    {
        Region,
        Province,
        Municipality,
        Barangay,
        None
    }

    protected override async Task OnInitializedAsync()
    {
        dataloading = true;
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();
            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
        }
        address.Province = new List<Province>();
        address.Municipality = new List<Municipality>();
        address.Barangay = new List<Barangay>();
        await GetRegions();
        var response = await httpClient.GetAsync($"ApplicationsManager/getstore?emailaddress={emailaddress}");

        if (response.IsSuccessStatusCode)
        {
            StoreApplications info = await response.Content.ReadFromJsonAsync<StoreApplications>();
            // Update form fields with retrieved details
            store.TIN = info.TIN;
            store.Name = info.Name;
            store.Logo = info.Logo;
            store.Status = info.Status;
            store.PhoneNumber = info.PhoneNumber;
            store.Email = info.Email;            
            store.AddressLine2 = info.AddressLine2;            
            store.GcashQr = info.GcashQr;                       
            store.OwnerId = info.OwnerId;
            store.Id = info.Id;
            store.Description = info.Description;
            _read = true;
            var regionCode = address.Region.FirstOrDefault(x => x.Name == info.PostalCode)?.Code;
            _region.SelectedValues = [regionCode];

            await OnChange(AddressMode.Province, regionCode);
            var provinceCode = address.Province.FirstOrDefault(x => x.Name == info.Province)?.Code;
            _province.SelectedValues = [provinceCode];

            await OnChange(AddressMode.Municipality, provinceCode);
            var municipalityCode = address.Municipality.FirstOrDefault(x => x.Name == info.CityTown)?.Code;
            _municipality.SelectedValues = [municipalityCode];

            await OnChange(AddressMode.Barangay, municipalityCode);
            var barangayCode = address.Barangay.FirstOrDefault(x => x.Name == info.AddressLine1)?.Code;
            _barangay.SelectedValues = [barangayCode];

            store.AddressLine1 = info.AddressLine1;
            store.CityTown = info.CityTown;
            store.Province = info.Province;
            store.PostalCode = info.PostalCode;
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorMessage);
            _read = false;
        }
        dataloading = false;
        await base.OnInitializedAsync();
    }


    private async Task GetRegions()
    {
        try
        {
            address.Region = await httpClient.GetFromJsonAsync<List<Region>>("https://psgc.gitlab.io/api/regions/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception Occured in getting regions: {ex.Message}");
        }
    }

    private async Task OnChange(AddressMode mode, string code)
    {
        switch (mode)
        {

            case AddressMode.Province:
                try
                {
                    regionCode = code;
                    address.Province = new List<Province>();
                    address.Province = await httpClient.GetFromJsonAsync<List<Province>>($"https://psgc.gitlab.io/api/regions/{code}/provinces/");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception Occured in getting province: {ex.Message}");
                }
                break;

            case AddressMode.Municipality:

                try
                {
                    provinceCode = code;
                    address.Municipality = new List<Municipality>();
                    address.Municipality = await httpClient.GetFromJsonAsync<List<Municipality>>($"https://psgc.gitlab.io/api/provinces/{code}/cities-municipalities/");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception Occured in getting municipality: {ex.Message}");
                }
                break;
            case AddressMode.Barangay:

                try
                {
                    municipalityCode = code;
                    address.Barangay = new List<Barangay>();
                    bool isCity = address.Municipality.FirstOrDefault(x => x.Code == municipalityCode).IsCity;

                    if (isCity)
                    {
                        address.Barangay = await httpClient.GetFromJsonAsync<List<Barangay>>($"https://psgc.gitlab.io/api/cities/{code}/barangays/");
                    }
                    else
                    {
                        address.Barangay = await httpClient.GetFromJsonAsync<List<Barangay>>($"https://psgc.gitlab.io/api/municipalities/{code}/barangays/");
                    }


                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception Occured in getting municipality: {ex.Message}");
                }
                break;
            case AddressMode.None:
                barangayCode = code;
                break;
        }
    }


    private async Task UploadFiles(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                store.Logo = base64String;
                // Construct the data URL
                imageUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }

    private async Task UploadFilesQR(IBrowserFile file)
    {
        try
        {
            // Read the content of the file as a byte array
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(5120000).CopyToAsync(memoryStream); //Maximum file size is 5 mb
                var bytes = memoryStream.ToArray();

                // Convert the byte array to a base64 string
                var base64String = Convert.ToBase64String(bytes);
                store.GcashQr = base64String;                
                // Construct the data URL
                imageQrUrl = $"data:{file.ContentType};base64,{base64String}";
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Maximum image file size is 5 MB", MudBlazor.Severity.Success);
        }

    }




    private async Task Submit()
    {
        try
        {
            _loading = true;
            await form.Validate();

            if (form.IsValid)
            {
                store.OwnerId = emailaddress;
                store.Id = string.IsNullOrEmpty(store.Id) ? "N/A" : store.Id;
                store.AddressLine2 = string.IsNullOrEmpty(store.AddressLine2) ? "N/A" : store.AddressLine2;
                store.Status = "0";
                var regionName = address.Region.FirstOrDefault(x => x.Code == regionCode)?.Name;
                var provinceName = address.Province.FirstOrDefault(x => x.Code == provinceCode)?.Name;
                var municipalityName = address.Municipality.FirstOrDefault(x => x.Code == municipalityCode)?.Name;
                var barangayName = address.Barangay.FirstOrDefault(x => x.Code == barangayCode)?.Name;

                store.Province = provinceName;
                store.AddressLine1 = barangayName;
                store.CityTown = municipalityName;
                store.PostalCode = regionName;
                var options = new DialogOptions
                    {
                        MaxWidth = MaxWidth.Medium
                    };
                bool? result = await DialogService.ShowMessageBox("Confirmation", "Do you want to continue?", "Continue", null, "Cancel", options);


                if (result == true)
                {
                    if (await AddStore(store))
                    {
                        Snackbar.Add("Submitted!", MudBlazor.Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Failed to submit.", MudBlazor.Severity.Error);
                    }
                }
            }            
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            Console.WriteLine(ex.Message);
            
        }
        finally
        {
            _loading = false;
        }


    }

    public async Task<bool> AddStore(StoreApplications storeApplications)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync("ApplicationsManager/registerstore", storeApplications);

            if (response.IsSuccessStatusCode)
            {
                // Role updated successfully
                return true;
            }
            else
            {
                // Failed to update role
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                return false;
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
            return false;
        }
    }
}