@using SharedLibrary
@inject HttpClient httpClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Class="mr-3 mb-n1" />
            Review Order
        </MudText>
    </TitleContent>
    <DialogContent>
        @foreach (var item in orders)
        {
            <MudItem Class="py-2">
                <MudPaper Elevation="4">
                    <MudItem Class="pa-2">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <MudText Typo="Typo.h6"><strong>Store: </strong>@item.StoreName</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudImage Src="icon-192.png" Width="50" Height="50" />
                                    <MudStack Row="false">
                                        <MudText Typo="Typo.h6">@item.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="item-muted">Category @item.Category</MudText>
                                    </MudStack>
                                    <MudSpacer />
                                    <MudText Class="text-danger">@item.Pcs pcs x ₱@item.DiscountedPrice</MudText>
                                </MudStack>
                            </MudCardContent>
                            <MudCardActions Class="justify-end">
                                <MudText Typo="Typo.button" Class="text-muted"><strong>Sub-Total: </strong> ₱@item.DiscountedTotal</MudText>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudPaper>
            </MudItem>            
            if (item == orders.Last())
            {
                <MudDivider/>
                <MudItem>
                    <MudStack Spacing="0" Class="pt-2">
                        <MudText Typo="Typo.body1" Class="fw-bold">Order Type</MudText>
                        <MudToggleGroup @bind-Value="@OrderType" T="int" SelectionMode="SelectionMode.SingleSelection"  Color="Color.Primary" CheckMark FixedContent>
                            <MudToggleItem Value="1" Text="Dine In" />
                            <MudToggleItem Value="2" Text="Pickup" />
                            <MudToggleItem Value="3" Text="Deliver" />
                        </MudToggleGroup>
                    </MudStack>                    
                    <MudStack Class="pt-3" Spacing="0">
                        <MudText Typo="Typo.body1"><strong>Total: </strong>₱@Total</MudText>
                        <MudText Typo="Typo.body1"><strong>Delivery Fee: </strong>₱50</MudText>
                    </MudStack>
                </MudItem>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="OnSubmit">Checkout</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public List<CartDisplay> orders { get; set; } = new List<CartDisplay>();
    private decimal Total = 0;
    private int OrderType;
    private int Pax = 0;


    protected override async Task OnInitializedAsync()
    {
        Total=orders.Sum(item => item.DiscountedTotal);
        await base.OnInitializedAsync();
    }



    private async Task OnSubmit()
    {



       

        try
        {
            if (OrderType == 0)
            {
                Snackbar.Add("Please select Order Type.", Severity.Warning);
                return;
            }
            else if (OrderType == 1)
            {
                var options = new DialogOptions { CloseOnEscapeKey = true, DisableBackdropClick = true, CloseButton=false,MaxWidth=MaxWidth.Small};
                var dialog = DialogService.Show<PaxInputDialog>("Simple Dialog", options);
                var result = await dialog.Result;

                if (!result.Canceled)
                {
                    Pax = (int)result.Data;

                    if (Pax == 0)
                    {
                        Snackbar.Add("Please enter number of pax for Dine in orders.", Severity.Warning);
                        return;
                    }
                   
                }
            }

            var cartIds = orders.Select(order => order.CartId);
            string cartIdsCSV = string.Join(",", cartIds);

            var data = new OrderInfo
                {
                    Id = 0,
                    OrderId = "0",
                    ItemId = 0,
                    Price = 0,
                    Pcs = 0,
                    SubTotal = 0,
                    UserId = cartIdsCSV,
                    StoreId = 0,
                    Status = 0,
                    OrderType = OrderType,
                    Pax = Pax,
                    CreatedOn = DateTime.Today
                };
            var response = await httpClient.PostAsJsonAsync("OrderManagement/addorder", data);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Order Submitted!",Severity.Success);

            }
            else
            {
                // Failed to update role
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                Snackbar.Add($"An Error Occured: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add($"An Error Occured: {ex.Message}", Severity.Error);
        }


        MudDialog.Close(DialogResult.Ok(true));
    }


    void Cancel() => MudDialog.Cancel();
}
