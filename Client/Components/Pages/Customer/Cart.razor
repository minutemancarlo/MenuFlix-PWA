@page "/my-cart"
@using SharedLibrary
@using Client.Validations
@using System.Security.Claims

@layout CustomerLayout
@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Customer")]
<PageTitle>My Cart</PageTitle>
<MudItem Class="d-flex justify-content-center" xs="12">
    <MudItem xs="8">
        <section class="h-100">
            <div class="container h-100 py-5">
                <div class="row d-flex justify-content-center align-items-center h-100">
                    <div class="col-10">

                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h3 class="fw-normal mb-0 text-black">Shopping Cart</h3>
                            
                        </div>

                       


                        @foreach(var item in cartItems)
                        {
                            Console.WriteLine(currentStoreId == null || currentStoreId != item.StoreId);
                            if(currentStoreId == null || currentStoreId != item.StoreId)
                            {
                                currentStoreId = item.StoreId;
                                <hr />                                
                                <MudText Typo="Typo.h6">Store Name: @item.StoreName</MudText>
                            }

                          

                            <div class="card rounded-3 mb-4" style="background-color: rgba(245,245,245,1)">
                                <div class="card-body p-4">
                                    <div class="row d-flex justify-content-between align-items-center">
                                        <div class="col-md-1"><MudCheckBox Class="pa-0" @bind-Value="@item.isChecked"></MudCheckBox></div>
                                        <div class="col-md-2">                                            
                                            <img src="icon-192.png"
                                                 class="img-fluid rounded-3" alt="item">
                                        </div>
                                        <div class="col-md-3">
                                            <p class="lead fw-normal mb-2">@item.Name</p>
                                            <p><span class="text-muted">Category: </span>@item.Category</p>
                                            <p><span class="text-muted">Store: </span>@item.StoreName</p>
                                        </div>
                                        <div class="col-md-2 d-flex">
                                            <MudNumericField @bind-Value="@item.Pcs" Margin="Margin.Dense" TextChanged="@(() => OnUpdateItem(item))" Variant="Variant.Outlined"  Step="1" Min="1" Max="99" />
                                        </div>
                                        <div class="col-md-2 offset-lg-1">
                                            @if(item.Price!=item.DiscountedPrice){
                                               <s class="text-danger"><h5 class="mb-0">₱@item.Price</h5></s>
                                            }
                                            <h5 class="mb-0">₱@item.DiscountedPrice</h5>
                                        </div>
                                        <div class="col-md-1 text-end">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="@(() => OnDeleteItem(item.CartId))"></MudIconButton>
                                        </div>
                                    </div>
                                </div>
                            </div>


                        }

                        


                       
                        <MudItem xs="12">
                            <MudCard >
                                <MudCardContent Class="d-flex align-start d-flex">                                    
                                        <MudText Typo="Typo.body2">We Accept Gcash or COD (Cash on Delivery) Payments</MudText> <MudSpacer />

                                    <MudButton Class="" Variant="Variant.Filled" Size="Size.Small" OnClick="OnCheckout" Color="Color.Success">Proceed to Order</MudButton>
                                                                                                                                                                                  
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </div>
                </div>
            </div>
        </section>

    </MudItem>
</MudItem>

@code {
    private int pcs { get; set; } = 0;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private string? emailaddress;
    private int currentStoreId;
    private bool firstLoad = true;
    private List<CartDisplay> cartItems = new List<CartDisplay>();
    public bool Basic_CheckBox1 { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();
            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
            await OnGetCartItems(emailaddress);

        }
        await base.OnInitializedAsync();

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        firstLoad = firstRender;
        return base.OnAfterRenderAsync(firstRender);
    }



    private async Task OnGetCartItems(string emailaddress)
    {
        try
        {
            cartItems = await httpClient.GetFromJsonAsync<List<CartDisplay>>($"Cart/getcartitems?emailaddress={emailaddress}");            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnDeleteItem(int cartId)
    {
        try
        {
            var data = new SharedLibrary.Cart
            {
                    IsProcessed = 0,
                            UserId = emailaddress,
                            Actions = 2,
                            Pcs = 0,
                            ItemId = 0,
                            CartId = cartId
            };            
            var response = await httpClient.PostAsJsonAsync("Cart/cartactions", data);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Item Removed from Cart", MudBlazor.Severity.Success);
                await OnGetCartItems(emailaddress);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
                Snackbar.Add($"An exception occurred:{errorMessage}", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
        }
    }

    private async Task OnUpdateItem(CartDisplay cartItems)
    {
        if (!firstLoad)
        {
            try
            {
                var data = new SharedLibrary.Cart
                    {
                        IsProcessed = 0,
                        UserId = emailaddress,
                        Actions = 1,
                        Pcs = cartItems.Pcs,
                        ItemId = 0,
                        CartId = cartItems.CartId
                    };
                var response = await httpClient.PostAsJsonAsync("Cart/cartactions", data);

                if (response.IsSuccessStatusCode)
                {            
                    await OnGetCartItems(emailaddress);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(errorMessage);
                    Snackbar.Add($"An exception occurred:{errorMessage}", Severity.Error);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Snackbar.Add($"An exception occurred:{ex.Message}", Severity.Error);
            }
        }




    }

    private async Task OnCheckout()
    {
        List<CartDisplay> checkedItems = cartItems.Where(item => item.isChecked).ToList();
        if (checkedItems.Count == 0)
        {
            Snackbar.Add("Please select Items to checkout",Severity.Warning);
            return;
        }

        if (ValidateStoreId(checkedItems))
        {
            Snackbar.Add("Please issue checkout on the same store.", Severity.Warning);
            return;
        }


        var parameters = new DialogParameters<CheckoutDialog>();
        parameters.Add(x => x.orders,checkedItems);

        var options = new DialogOptions() { CloseButton = true, DisableBackdropClick=true, MaxWidth = MaxWidth.Medium };
        DialogService.Show<CheckoutDialog>("Checkout", parameters, options);
    }

    bool ValidateStoreId(List<CartDisplay> cartItems)
    {
        // Get distinct StoreIds from the cartItems
        var distinctStoreIds = cartItems.Select(item => item.StoreId).Distinct();

        // If there's only one distinct StoreId, return false
        // If there are multiple distinct StoreIds, return true
        return distinctStoreIds.Count() > 1;
    }


}