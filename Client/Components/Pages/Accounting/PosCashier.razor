@page "/accounting-pos"
@using SharedLibrary
@using System.Security.Claims
@using Newtonsoft.Json
@using ClosedXML.Excel
@using System.IO
@using Client.Components.Pages.Accounting.Components
@layout MainLayout

@inject HttpClient httpClient
@inject AuthenticationStateProvider authProvider

@attribute [Authorize(Roles = "Accounting")]
<PageTitle>Store POS</PageTitle>
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
<MudItem xs="12">
    <MudItem>
        <MudBreadcrumbs Items="_items" Class="pointer-events-none"></MudBreadcrumbs>
    </MudItem>
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" Class="justify-content-center">
            <MudDataGrid Items="cashierDisplay" Class="w-100" T="CashierDisplay" MultiSelection="false"
                         Elevation="0" Loading="_loading" Bordered
                         Striped ColumnResizeMode="ResizeMode.Column" Groupable="true"
                         GroupExpanded="false" SortMode="SortMode.None"
                         EditMode="DataGridEditMode.Cell"
                         SelectOnRowClick
                         EditTrigger="DataGridEditTrigger.Manual"
                         CommittedItemChanges="@CommittedItemChanges"
                         Filterable HeaderClass=" text-uppercase font-weight-bold">
                         <ToolBarContent>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Size="Size.Small" Color="Color.Success" OnClick="@(async () => await OnGetOrders(emailaddress))">Refresh</MudButton>
                    @* <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" Size="Size.Small" Color="Color.Primary" OnClick="OnGenerateExcel">Generate Report</MudButton> *@

                </ToolBarContent>
                <Columns>                    
                    <PropertyColumn Property="x => x.OrderItems.OrderId" Grouping IsEditable="false" Hidden="true">
                        <GroupTemplate>
                            <span style="font-weight:bold">Order ID: @context.Grouping.Key</span>                            
                            @* <span style="font-weight:bold"> Total: ₱ @context.Grouping.FirstOrDefault().OrderItems.Total</span> *@
                            @* <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CreditCardOff" Size="Size.Medium" Color="Color.Error" Class="float-end">Void</MudButton> *@
                            @if (context.Grouping.FirstOrDefault()?.OrderItems.isRemitted == 0)
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AssuredWorkload" Size="Size.Small" Disabled Color="Color.Success" Class="float-end">Remit Payment</MudButton>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCard" Size="Size.Small" Color="Color.Info" Class="float-end" OnClick="@(async () => await OnReceive(context.Grouping.Key.ToString()))">Receive Payment</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AssuredWorkload" Size="Size.Small" Color="Color.Success" Class="float-end" OnClick="@(async () => await OnRemit(context.Grouping.Key.ToString()))">Remit Payment</MudButton>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCard" Size="Size.Small" Disabled Color="Color.Info" Class="float-end" >Receive Payment</MudButton>
                            }                            
                        </GroupTemplate>
                        <CellTemplate>
                            <span></span>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.OrderItems.OrderId" Title="Order Id" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false"/>
                    <PropertyColumn Property="x => x.OrderItems.ItemName" Title="Item Name" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false"/>
                    <PropertyColumn Property="x => x.OrderItems.Pcs" Title="Pcs" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.OrderItems.Price" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.OrderItems.SubTotal" Title="Sub Total" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.OrderItems.Total" CellClass="fw-bold text-danger" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false">
                        <CellTemplate>
                            <MudText>₱ @context.Item.OrderItems.Total</MudText>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.OrderItems.CreatedOn" Title="Order Created" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false" />
                    <PropertyColumn Property="x => x.Status.UpdatedOn" Title="Order Completed" HeaderClass="fw-bold blue darken-1 shades-text text-white" Filterable="false" Groupable="false" />
                </Columns>
                <NoRecordsContent>No available records to show.</NoRecordsContent>
                <PagerContent>
                    <MudDataGridPager T="CashierDisplay" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudStack>
</MudItem>

@code {
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Accounting", href: "#", icon: Icons.Material.Filled.AccountCircle),
        new BreadcrumbItem("Point of Sale", href: "#", icon: Icons.Material.Filled.AdfScanner)
    };
    private string emailaddress { get; set; }
    private List<Claim> UserClaims { get; set; } = new List<Claim>();
    private List<OrderJson> orderJson = new List<OrderJson>();
    private List<OrderDisplay> orders { get; set; } = new List<OrderDisplay>();
    private List<CashierDisplay> cashierDisplay { get; set; } = new List<CashierDisplay>();
    private List<OrderDisplay> completedOrders { get; set; } = new List<OrderDisplay>();
    private OrderDisplay _currentDto = new OrderDisplay();
    private HashSet<OrderDisplay> _selectedItems = new();
    private bool _loading = false;
    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        var auth = await authProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();
            foreach (var item in UserClaims)
            {
                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
            await OnGetOrders(emailaddress);

        }
        await base.OnInitializedAsync();
    }
    void CommittedItemChanges(CashierDisplay item)
    {
        // Snackbar.Add($"Event = CommittedItemChanges", Severity.Info);
    }

    private async Task OnRemit(string orderid)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth= MaxWidth.Small, FullWidth=true,Position=DialogPosition.Center,ClassBackground = "my-custom-class"  };
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.OrderId, orderid);
        parameters.Add(x => x.Action, "Remit");
        parameters.Add(x => x.Refresh, async () => await OnGetOrders(emailaddress));
        var dialog = DialogService.Show<ConfirmationDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if(!result.Canceled)
            await OnGetOrders(emailaddress);
    }

    private async Task OnReceive(string orderid)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, Position = DialogPosition.Center, ClassBackground = "my-custom-class" };
        var parameters = new DialogParameters<ConfirmationDialog>();
        parameters.Add(x => x.OrderId, orderid);
        parameters.Add(x => x.Action, "Receive");
        parameters.Add(x => x.Refresh, async () => await OnGetOrders(emailaddress));
        var dialog = DialogService.Show<ConfirmationDialog>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await OnGetOrders(emailaddress);
    }

    private void OnGenerateExcel()
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Orders");
            var currentRow = 1;
            worksheet.Cell(currentRow, 1).Value = "Id";
            worksheet.Cell(currentRow, 2).Value = "Item Name";
            worksheet.Cell(currentRow, 3).Value = "Pcs";
            worksheet.Cell(currentRow, 4).Value = "Price";
            worksheet.Cell(currentRow, 5).Value = "Sub Total";
            foreach (var user in cashierDisplay)
            {
                currentRow++;
                worksheet.Cell(currentRow, 1).Value = user.OrderItems.OrderId;
                worksheet.Cell(currentRow, 2).Value = user.OrderItems.ItemName;
                worksheet.Cell(currentRow, 3).Value = user.OrderItems.Pcs;
                worksheet.Cell(currentRow, 4).Value = user.OrderItems.Price;
                worksheet.Cell(currentRow, 5).Value = user.OrderItems.SubTotal;
            }

            // using (var stream = new MemoryStream())
            // {
            //     workbook.SaveAs(stream);
            //     var content = stream.ToArray();

            //     return File(
            //         content,
            //         "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            //         "users.xlsx");
            // }
            workbook.SaveAs("HelloWorld.xlsx");
        }
    }



    private async Task OnGetOrders(string emailaddress)
    {

        try
        {
            orderJson = new List<OrderJson>();
            orders = new List<OrderDisplay>();            
            completedOrders = new List<OrderDisplay>();
            var ordersJson = await httpClient.GetFromJsonAsync<List<OrderJson>>($"OrderManagement/getcustomerordersall?emailaddress={emailaddress}");
            orderJson = ordersJson;
            foreach (var item in ordersJson)
            {
                var orderItems = JsonConvert.DeserializeObject<List<OrderItem>>(item.Item);
                var statuses = JsonConvert.DeserializeObject<List<StatusEntry>>(item.Status);
                var users = JsonConvert.DeserializeObject<List<UserAdditionalDetails>>(item.UserAdditionalDetails);

                // Create an OrderDisplay object and set its properties
                var orderDisplay = new OrderDisplay
                    {
                        OrderItems = orderItems,
                        Status = statuses,
                        UserAdditionalDetails = users
                    };

                orders.Add(orderDisplay);

            }            
            completedOrders = orders.Where(x => x.Status.LastOrDefault()?.Status == 4).ToList();
            cashierDisplay.Clear();
            foreach (var item in completedOrders)
            {
                if(item.OrderItems.FirstOrDefault().isRemitted != 2)
                {
                    var data = new CashierDisplay
                        {
                            OrderItems = item.OrderItems.FirstOrDefault(),
                            Status = item.Status.FirstOrDefault(),
                            UserAdditionalDetails = item.UserAdditionalDetails.FirstOrDefault(),
                        };
                    cashierDisplay.Add(data);
                }                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private Func<OrderDisplay, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // if (x.OrderItems.FirstOrDefault()?.ItemName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;




        return false;
    };
}