@inject IJSRuntime _jsRuntime;
@implements IAsyncDisposable

<MudPaper Width="250px" Style="height: 100%;overflow: hidden" Elevation="0">
   @*  @if (IsOnline)
    {
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudChip Class="fixed-bottom" Size="Size.Small" Icon="@Icons.Material.Filled.CloudDone" Color="Color.Success"></MudChip>
        </MudStack>
    }
    else
    {
        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudChip Class="fixed-bottom" Size="Size.Small" Icon="@Icons.Material.Filled.CloudOff" Color="Color.Error"></MudChip>
        </MudStack>
    } *@
    <MudNavMenu Style="height: 95%;overflow: hidden" Bordered>                      
        <MudDivider Class="my-2" />        
        <AuthorizeView Roles="Administrator">
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" Href="/admin-dashboard">Dashboard</MudNavLink>            
            <MudNavLink Icon="@Icons.Material.Filled.Storefront" Href="/store">Store Management</MudNavLink>           
        </AuthorizeView>        

        <AuthorizeView Roles="Manager">
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" Href="/manager-dashboard">Dashboard</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.RestaurantMenu" Href="/manager-menu">Menu</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.Group" Href="/applicants">Applicants Management</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.ReceiptLong" Href="/manager-orders">Orders</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.Store" Href="/manager-mystore">My Store</MudNavLink>
            @* <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" Expanded="true">
                <MudNavLink Href="/users" Icon="@Icons.Material.Filled.ManageAccounts">Users</MudNavLink>
                <MudNavLink Href="/counter">Security</MudNavLink>
            </MudNavGroup> *@
        </AuthorizeView>       
        <AuthorizeView Roles="Accounting">
            <MudNavLink Href="/">Point of Sale</MudNavLink>
            <MudNavLink Href="/fetchdata">Orders</MudNavLink>
            <MudNavLink Href="/billing">Cash Management</MudNavLink>            
            @* <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" Expanded="true">
            <MudNavLink Href="/users" Icon="@Icons.Material.Filled.ManageAccounts">Users</MudNavLink>
            <MudNavLink Href="/counter">Security</MudNavLink>
            </MudNavGroup> *@
        </AuthorizeView>
       
        <AuthorizeView Roles="Delivery">
            <MudNavLink Href="/">Dashboard</MudNavLink>
            <MudNavLink Href="/fetchdata">Order Details</MudNavLink>
            <MudNavLink Href="/billing">Chat</MudNavLink>            
            @* <MudNavGroup Title="Settings" Icon="@Icons.Material.Filled.Settings" Expanded="true">
            <MudNavLink Href="/users" Icon="@Icons.Material.Filled.ManageAccounts">Users</MudNavLink>
            <MudNavLink Href="/counter">Security</MudNavLink>
            </MudNavGroup> *@
        </AuthorizeView>       
    </MudNavMenu>
   
       
</MudPaper>

@code{
    [Parameter]
    public RenderFragment Online { get; set; }

    [Parameter]
    public RenderFragment Offline { get; set; }

    public bool IsOnline { get; set; }

    [JSInvokable("Connection.StatusChanged")]
    public void OnConnectionStatusChanged(bool isOnline)
    {
        if (IsOnline != isOnline)
        {
            IsOnline = isOnline;
        }
        if(IsOnline)
        {
            Snackbar.Add("You are back online", Severity.Success);
        }else{
            Snackbar.Add("You are offline", Severity.Error);
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _jsRuntime.InvokeVoidAsync("Connection.Initialize", DotNetObjectReference.Create(this));
    }

    public async ValueTask DisposeAsync()
    {
        await _jsRuntime.InvokeVoidAsync("Connection.Dispose");
    }
}