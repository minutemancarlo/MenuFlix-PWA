@using Client.Identity
@using System.Security.Claims
@using SharedLibrary
@inject IAccountManagement Acct
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager _navigationManager
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<AuthorizeView>
    <NotAuthorized>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => AuthAction("login"))" Size="Size.Small">Login</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => AuthAction("register"))" Size="Size.Small">SignUp</MudButton>
        </MudStack>
    </NotAuthorized>
    <Authorizing>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudSkeleton Width="30px" Height="42px;" />
            <MudSkeleton Width="30px" Height="42px;" />
        </MudStack>
    </Authorizing>

    <Authorized>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (IsCustomer)
                {

                    <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/" StartIcon="@Icons.Material.Filled.Home" Color="Color.Error">Home</MudButton>
                    <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/menu" StartIcon="@Icons.Material.Filled.RestaurantMenu" Color="Color.Error">Menu</MudButton>                    
                        <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/my-orders" StartIcon="@Icons.Material.Filled.CreditCard" Color="Color.Error">Orders</MudButton>                    
                    <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/stores" StartIcon="@Icons.Material.Filled.Storefront" Color="Color.Error">Stores</MudButton>
                    <MudSpacer />
                    <MudBadge Content="@customerLayout.Count" Overlap Color="Color.Warning">
                        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.ShoppingCart" Href="/my-cart" Size="Size.Small" />
                    </MudBadge>
                }

                <MudMenu Class="my-3" ActivationEvent="@MouseEvent.LeftClick" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        @* <MudImage Src="@profilePic" Elevation="4" Class="rounded-circle" ObjectFit="ObjectFit.Contain" Width="40" Height="40"></MudImage> *@
                        <MudAvatar Color="Color.Primary">@emailaddress?.Substring(0, 2).ToUpper()</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>                        
                        <MudText Typo="Typo.subtitle2" Class="text-muted text-center">@Role</MudText>
                        <MudDivider/>
                        <MudMenuItem IconSize="Size.Small" Href="/account" Icon="@Icons.Material.Filled.Person">Account</MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" OnClick="BeginLogout" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudStack>
        </MudHidden>
       
        <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center">
                @if (IsCustomer)
                {

                    @* <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/" StartIcon="@Icons.Material.Filled.Home" Color="Color.Error">Home</MudButton>
                <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/menu" StartIcon="@Icons.Material.Filled.RestaurantMenu" Color="Color.Error">Menu</MudButton>
                <MudBadge Content="@customerLayout.OrderCount" Overlap Color="Color.Warning">
                <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/my-orders" StartIcon="@Icons.Material.Filled.CreditCard" Color="Color.Error">Orders</MudButton>
                </MudBadge>
                <MudButton Variant="Variant.Outlined" IconSize="Size.Medium" Href="/stores" StartIcon="@Icons.Material.Filled.Storefront" Color="Color.Error">Stores</MudButton> *@
                    <MudSpacer />
                    <MudBadge Content="@customerLayout.Count" Overlap Color="Color.Warning" Class="pr-1">
                        <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.ShoppingCart" Href="/my-cart" Size="Size.Small" />
                    </MudBadge>
               

                }
                <MudMenu Class="my-3"  AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        @* <MudImage Src="@profilePic" Elevation="4" Class="rounded-circle" ObjectFit="ObjectFit.Contain" Width="40" Height="40"></MudImage> *@
                        <MudAvatar Color="Color.Primary">@emailaddress?.Substring(0, 2).ToUpper()</MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        
                        <MudText Typo="Typo.subtitle2" Class="text-muted text-center">@Role</MudText>
                        <MudDivider />
                        @if(IsCustomer){
                        <MudMenuItem IconSize="Size.Medium" Href="/" Icon="@Icons.Material.Filled.Home">Home</MudMenuItem>
                        <MudMenuItem IconSize="Size.Medium" Href="/menu" Icon="@Icons.Material.Filled.RestaurantMenu">Menu</MudMenuItem>
                        <MudMenuItem IconSize="Size.Medium" Href="/my-orders" Icon="@Icons.Material.Filled.CreditCard">Orders</MudMenuItem>
                        <MudMenuItem IconSize="Size.Medium" Href="/stores" Icon="@Icons.Material.Filled.Storefront">Stores</MudMenuItem>
                        }                        
                        <MudMenuItem IconSize="Size.Medium" Href="/account" Icon="@Icons.Material.Filled.Person">Account</MudMenuItem>
                        <MudMenuItem IconSize="Size.Medium" OnTouch="BeginLogout" Icon="@Icons.Material.Filled.Logout">Log Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudStack>
        </MudHidden>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public CustomerLayout customerLayout { get; private set; }
    string profilePic = String.Empty;
    string name = String.Empty;
    public List<Claim> UserClaims { get; set; } = new List<Claim>();
    private bool IsCustomer { get; set; }
    private bool isLoggedIn { get; set; }
    private string? emailaddress { get; set; }
    private string? Role { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsCustomer = user.IsInRole("Customer");
        if (user.IsInRole("Administrator"))
        {
            Role = "Administrator";
        }
        else if (user.IsInRole("Manager"))
        {
            Role = "Manager";
        }
        else if (user.IsInRole("Delivery"))
        {
            Role = "Delivery";
        }
        else if (user.IsInRole("Accounting"))
        {
            Role = "Accounting";
        }
        isLoggedIn = user.Identity.IsAuthenticated;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserClaims = user.Claims.ToList();

            foreach (var item in UserClaims)
            {
                if (item.Type == "picture")
                {
                    profilePic = item.Value;
                }
                if (item.Type == "nickname")
                {
                    name = item.Value;
                }

                if (item.Type.Contains("emailaddress"))
                {
                    emailaddress = item.Value;
                }
            }
            if (IsCustomer)
            {
                await OnGetOrderNumbers();
                await OnGetCartNumbers();
            }

        }
        else
        {
            // Handle the case where the user is not authenticated
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task BeginLogout()
    {
        if (await Acct.CheckAuthenticatedAsync())
        {
            
            await localStorage.SetItemAsync("_open", true);
            await Acct.LogoutAsync();
            _navigationManager.NavigateTo("/");
        }

    }

    private void AuthAction(string action)
    {
        _navigationManager.NavigateTo(action);
    }

    private async Task OnGetCartNumbers()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<int>>($"Cart/getcartcount?emailaddress={emailaddress}");
            if (response.Count() <= 0)
            {
                customerLayout.Count = 0;
            }
            else
            {
                customerLayout.Count = response[0];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnGetOrderNumbers()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<int>>($"OrderManagement/GetOrderCount?emailaddress={emailaddress}");
            if (response.Count() <= 0)
            {
                customerLayout.OrderCount = 0;
            }
            else
            {
                customerLayout.OrderCount = response[0];
            }

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
            Snackbar.Add($"An exception occurred: {ex.Message}", Severity.Error);
        }
    }


    // private async Task Prompt()
    // {
    //     var options = new DialogOptionsEx
    //         {
    //             CloseButton = true,
    //             Position = DialogPosition.Center,
    //             Animation = AnimationType.SlideIn,
    //             AnimationDuration = TimeSpan.FromMilliseconds(500),
    //             FullWidth = true,
    //             MaxWidth = MaxWidth.Medium,
    //             MaxHeight = MaxHeight.Medium
    //         };

    //     var parameters = new DialogParameters<LoginDialog> { { x => x.server, "Hello" } };
    //     var dialog = await DialogService.ShowEx<LoginDialog>("Your Dialog Title", parameters, options);
    // }


}